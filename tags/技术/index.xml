<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>技术 on CocaColf</title><link>https://cocacolf.github.io/tags/%E6%8A%80%E6%9C%AF/</link><description>Recent content in 技术 on CocaColf</description><generator>Hugo -- gohugo.io</generator><copyright>&amp;copy; 2020 CocaColf</copyright><lastBuildDate>Thu, 17 Oct 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://cocacolf.github.io/tags/%E6%8A%80%E6%9C%AF/index.xml" rel="self" type="application/rss+xml"/><item><title>简单版html模板引擎</title><link>https://cocacolf.github.io/blog/%E7%AE%80%E5%8D%95%E7%89%88html%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/</link><pubDate>Thu, 17 Oct 2019 00:00:00 +0000</pubDate><guid>https://cocacolf.github.io/blog/%E7%AE%80%E5%8D%95%E7%89%88html%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/</guid><description>背景 功能中包含一个历史申请记录的显示页面，简笔画简单画了一下，如下所示：
不知道多久没写过字了，画下来的东西着实丑，既然不能绘色，那就绘声一下。 每一条记录对应一个面板，每一个面板上呈现着对应记录的信息。那么不同的审批状态，就有很多东西不一样：
数据，这个没得说 内容的样式。比如审批成功用绿色标识，失败是红色 操作。比如审批中，那么就有一个撤销申请的按钮；其他的状态，就没有这个按钮，但是有一个面板折叠的按钮 面板左侧有状态条，反映当前的状态，同时也是时间线的作用 。。。 这个历史申请的数据是用XML格式传递的，如下所示：
&amp;lt;?xml version=\&amp;#34;1.0\&amp;#34; encoding=\&amp;#34;utf-8\&amp;#34;?&amp;gt; &amp;lt;Expansion&amp;gt; &amp;lt;Result&amp;gt;0&amp;lt;/Result&amp;gt; &amp;lt;ApplicationRecord&amp;gt; &amp;lt;record id=&amp;#34;1&amp;#34; status=&amp;#34;0&amp;#34; apply_cpu=&amp;#34;4&amp;#34; apply_mem=&amp;#34;8&amp;#34; apply_disk=&amp;#34;256&amp;#34; apply_time=&amp;#34;2019-10-14 20:00&amp;#34; approve_time=&amp;#34;2019-10-15 15:00&amp;#34; apply_reason=&amp;#34;卡得不能用了&amp;#34; approve_reason=&amp;#34;满足你&amp;#34; admin_name=&amp;#34;XXX&amp;#34; admin_phone=&amp;#34;2333333&amp;#34; admin_email=&amp;#34;test@gmail.com&amp;#34;/&amp;gt; &amp;lt;record id=&amp;#34;2&amp;#34; status=&amp;#34;2&amp;#34; apply_cpu=&amp;#34;4&amp;#34; apply_mem=&amp;#34;8&amp;#34; apply_disk=&amp;#34;256&amp;#34; apply_time=&amp;#34;2019-10-14 20:00&amp;#34; approve_time=&amp;#34;2019-10-15 15:00&amp;#34; apply_reason=&amp;#34;卡得不能用了&amp;#34; approve_reason=&amp;#34;那就继续卡着吧&amp;#34; admin_name=&amp;#34;XXX&amp;#34; admin_phone=&amp;#34;2333333&amp;#34; admin_email=&amp;#34;test@gmail.com&amp;#34;/&amp;gt; &amp;lt;/ApplicationRecord&amp;gt; &amp;lt;/Expansion&amp;gt; 所以很明显，要去遍历解析这个XML，去循环创建面板，再根据每条记录里对应的字段，写上正确的内容以及设置不同的样式。
由于某些原因，没有使用任何样式库或者框架，使用原生js编写。
以上是背景。
思路 当然这个需求没有难点，最一般的方法，当然就是html字符串拼接，在大量的 js if else逻辑里，将不同的数据和html片段拼接起来。其中一个片段可能是这样：
var data = {}; // 数据 var str = &amp;#39;&amp;#39;; // html拼接 if(data.</description></item><item><title>Node.js Event Loop</title><link>https://cocacolf.github.io/blog/node.js-event-loop/</link><pubDate>Sun, 28 Apr 2019 00:00:00 +0000</pubDate><guid>https://cocacolf.github.io/blog/node.js-event-loop/</guid><description>第一次接触Node的时候就喜欢上它了，但是那时候学习它的时候，一直感觉入不了门，会写一点但总感觉隔了层膜，挺难受的，后来的渐渐有所感觉是在简单的了解了事件驱动后。再后来就觉得JS层面的Node其实没有太多的东西，于是开始想要去了解下层一点的东西。最近看了一篇非常好的博文，在这里做几点记录。
什么是事件循环 event Demultiplexer来处理事件分发，同时把IO操作委托给硬件。它是一种抽象，各操作系统有自己的实现(Linux -&amp;gt; epoll,MacOS -&amp;gt; kqueue,Windows -&amp;gt; IOCP)。为了支持不同的操作系统中不同的IO操作，于是诞生了libuv。
当IO操作被处理时，相对应的回调函数就被加入事件队列
事件队列执行并清空事件队列
循环上述过程
事件队列 简化的事件循环的执行阶段顺序
 这里有几个要点:
有两个中间过渡检查: process.nextTick 和 process.resolve，且前者优先级大于后者
next tick 队列始终不为空导致IO饿死的问题
Timers并不一定会准确执行，与CPU性能和当前所处的事件阶段有关
两个很经典的例子
// 执行顺序不能保证 setTimeout(function() { console.log(&amp;#39;setTimeout&amp;#39;); }, 0); setImmediate(function() { console.log(&amp;#39;setImmediate&amp;#39;); }); // setImmediate 一定在 setTimeout 之前执行 const fs = require(&amp;#39;fs&amp;#39;); fs.readFile(__filename, () =&amp;gt; { setTimeout(() =&amp;gt; { console.</description></item></channel></rss>