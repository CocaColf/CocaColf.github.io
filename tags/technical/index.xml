<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>technical on CocaColf</title><link>https://cocacolf.github.io/tags/technical/</link><description>Recent content in technical on CocaColf</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 28 Dec 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://cocacolf.github.io/tags/technical/index.xml" rel="self" type="application/rss+xml"/><item><title>代码质量检测工具服务端设计</title><link>https://cocacolf.github.io/blog/%E4%BB%A3%E7%A0%81%E8%B4%A8%E9%87%8F%E6%A3%80%E6%B5%8B%E5%B7%A5%E5%85%B7%E6%9C%8D%E5%8A%A1%E7%AB%AF/</link><pubDate>Tue, 28 Dec 2021 00:00:00 +0000</pubDate><guid>https://cocacolf.github.io/blog/%E4%BB%A3%E7%A0%81%E8%B4%A8%E9%87%8F%E6%A3%80%E6%B5%8B%E5%B7%A5%E5%85%B7%E6%9C%8D%E5%8A%A1%E7%AB%AF/</guid><description>TL;DR  今年很多时间都在开发和维护代码质量检测工具，到现在已经稳定运行了两个多月。之前写过它的 cli 端，本文是关于支撑该 cli 端以及质量报告平台的服务端的设计。它由设计文档简化精炼而来，作为个人记录和回顾所用。代码质量检测服务端开发的那段时间是我非常高效、聪明、有激情的一段时间，我很感谢它带给我的快乐。每个软件开发工程师在自己的编码生涯里都会有自己的代表作，它不一定有多厉害。你报之它以你的时间、智慧、苦恼，它报之你以喜悦和成就感，它让你感知到自己的能力和成长，让你在某些场合下嘴里滔滔不绝，眼里四射光芒。我喜欢这样的作品，我喜欢这样的过程，我喜欢这样的回忆。
需求分析  如果有阅读过之前写的代码质量检测工具可能会对 bcode 有印象，但这里我还是简单描述一下：代码质量检测工具的起点是一个命令行工具，安装且在代码目录下执行 bcode check [文件(夹)] 后会扫描代码并生成一系列报告文件提供给服务端，服务端承载后续的工作，同个项目的扫描记录和数据分析会以报告汇总的形式在 Web 平台上查看。
如下导图所示，需求按照三种场景来进行分析。
由于无法从内网捕获截图演示，这里对标注的几点进行扩展解释，序号和导图中一致。
为了让工具更好的自动化，此工具将和 CICD 结合使用。然而许多产品线的流水线环境中 Node 版本过低，因此提供了远程扫描功能。
bcode 的使用很简单，一行命令即可。但会存在较复杂的场景，比如某些文件要忽略检查；甚至每个维度都有单独的忽略文件规则，因此为了方便使用，可以将这些规则定义在约定的配置文件(bcode.config.js)中，执行命令时工具会去寻找和读取该配置。我们在 web 平台上项目设置里也提供了这些参数的设置，因此这个配置文件省略，每次工具扫描时会从服务端获取该项目的配置。（还是很贴心的吧）
bcode 有个维度是拼写检查，那么有很多单词是词典非法但大众默认合法的（比如 nums），所以有项目词库这种需求出现。每次扫描时服务端会下发单词词库，cli 端扫描时会将这些单词当作合法单词。
扫描结束后，会根据配置的通知方式将报告结果进行通知。
将需求进行收敛后，得到如下的功能点：
大部分功能都是比较简单的，下面内容聚焦在几个主要的功能模块上。
整体静态结构
模块
说明
扫描模块
主要处理扫描相关的工作：
1. Cli 扫描上报的文件处理
2. 扫描数据处理
3.远程扫描
词库管理
主要处理词库相关是事情：
1.</description></item><item><title>制定你的GitLab流水线任务</title><link>https://cocacolf.github.io/blog/%E5%90%88%E5%85%A5npm%E5%8C%85%E5%88%B0cicd/</link><pubDate>Wed, 13 Oct 2021 00:00:00 +0000</pubDate><guid>https://cocacolf.github.io/blog/%E5%90%88%E5%85%A5npm%E5%8C%85%E5%88%B0cicd/</guid><description>最近要将开发的 npm 包合入 CICD 流水线里，摸索着完成了这个搭建。
本文默认你已了解 CICD 是什么，并且 GitLab 具备必要条件：如可用的 Runner。
 一个流水线服务需要以下几个基本要素：
.gitlab-ci.yml 文件 可用的 Runner 执行某个流水线任务的脚本文件 编写配置文件和脚本  .gitlab-ci.yml 文件是必须的，它定义了流水线任务如何执行。而我们的任务肯定要在某个环境中执行，Runner 就是一个具备运行条件的环境，可能是某个服务器，也可能是某个 Docker 容器，这里不涉及 Runner 的搭建，因此默认已经有可用的 Runner。
下面是一个示例文件：
stages: - code_scan - eslint_check 代码扫描: stage: code_scan tags: - code-check script: - cd ${CI_PROJECT_DIR} - chmod +x ./.gitlab/ci/codeCheck.sh - ./.gitlab/ci/codeCheck.sh encore allow_failure: true when: always only: variables: - $UEDC_MERGE_REQUEST_APPROVED == &amp;#34;true&amp;#34; eslint检查: stage: eslint_check tags: - eslint-check script: - .</description></item><item><title>Nest.js任务队列实现远程代码扫描</title><link>https://cocacolf.github.io/blog/nest.js%E4%BB%BB%E5%8A%A1%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%AB%E6%8F%8F/</link><pubDate>Mon, 11 Oct 2021 00:00:00 +0000</pubDate><guid>https://cocacolf.github.io/blog/nest.js%E4%BB%BB%E5%8A%A1%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%AB%E6%8F%8F/</guid><description>之前开发的代码质量检测工具存在一个问题：在大部分时候开发业务代码已经够费神了，开发者并不会主动使用这个工具给代码打分，而且万一检查出来很多问题还得改，这不是没事找事吗？但是你们不使用我怎么完成我的OKR呢？为了能够让工具的使用更加无感知，结合 CICD 是一种比较好的做法，每次提交合并请求就自动检查，有问题这个请求就不能被合入，再添以邮件通知告警等功能，则可对项目实现一次配置，持续监察。
 问题在于该工具的使用条件需要满足 Node 版本大于 12，调研后发现许多产品线的 Runner 中打包项目的 Node 版本并不满足此要求，因此远程扫描这个功能便应运而生。
远程扫描功能整个过程是：
cli 将本地的代码发送至服务端进行扫描 服务端扫描代码（等价于在本地扫描代码，只是执行环境在服务端），返回扫描结果  很显然如果代码量较大，则压缩传输和服务端扫描都需要花费一定的时间，但使用者关注的只是报告结果，这个结果过会儿去报告平台上去查阅即可，因此扫描的这部分时间并不值得等待。所以服务端的接口在获取到上传文件后便可向客户端返回响应告知其上传成功即可，扫描的工作在后台执行。像这种场景，任务队列便是解决这种类型问题的好办法。
 在 Nest.js Queues 中了解到 bull，它基于 Redis 实现任务队列。下面是 Nest.js 中使用 bull 实现任务队列的一个例子。
先定义任务队列管理器：
import { Process, Processor } from &amp;#39;@nestjs/bull&amp;#39;; import { Job } from &amp;#39;bull&amp;#39;; @Processor(&amp;#39;bcodeScan&amp;#39;) export class ScanCodeProcessor { // 某个任务队列 @Process(&amp;#39;startRemoteScan&amp;#39;) async startScan (job: Job) { // 获取该任务处理相关的数据 const { dataExample } = job.data; // do something to handle task.</description></item><item><title>走马观Nest.js</title><link>https://cocacolf.github.io/blog/%E8%B5%B0%E9%A9%AC%E8%A7%82nest.js/</link><pubDate>Fri, 02 Jul 2021 00:00:00 +0000</pubDate><guid>https://cocacolf.github.io/blog/%E8%B5%B0%E9%A9%AC%E8%A7%82nest.js/</guid><description>TL;DR 从19年夏天偶然了解 Nest.js 至今，我已经使用它构建了三个应用，不过应用的规模都不大。每个应用之间都相隔半年以上，但每一次它给我的开发体验都是十分舒服的，它已成为目前我构建后端应用的首选框架。最近在开发代码质量检测工具的服务端时我依然选择它开发。这篇文章对 Nest.js 进行了简单的介绍，通过此文能够基本了解 Nest.js 的使用和开发。
初次接触 Nest.js，可能会觉得它的概念特别多，引入了 Providers 、Pipes 等概念。我个人觉得这些概念的出现是很自然的，而且这恰好是它最大的特点，一个后端应用从请求到达至响应的每一个环节都有具体的执行者，这种“专人专事”的方式使得项目非常清晰。
控制器 (Controllers) 在 Nest.js 中，每一个控制器是一个类，我们使用 @Controller 来标识它，配合 @Get/Post 等 method 标识，即可完成一个控制器。
import { Controller, Get } from &amp;#39;@nestjs/common&amp;#39; @Controller(&amp;#39;test&amp;#39;) export class TestController { @Get(&amp;#39;list&amp;#39;) getList (@Query(&amp;#39;name&amp;#39;) name: string) {} } 而且框架内置了非常多的 HttpStatus 和 HttpExceptions，极方便的辅助开发。
提供者 (Providers) Providers 是一个很抽象的概念，其几乎可以是任何一个类，通过依赖注入到不同的类中，让被注入对象的创建工作委托给 Nest.js 运行时，使得不同模块/类之间的使用变得非常简单。使用 @Injectable 修饰一个类，即可将其变成 Providers。
比如我们上面有了控制器，根据 MVC 思想，一般我们的业务处理会放在 M 层去处理。
// testService.ts import {Injectable} from &amp;#39;@nestjs/common&amp;#39; @Injectable() export class TestService { hanleList () { } } 那么在我们的其他模块，便可以通过依赖注入使用这个 Providers，你不需要去做诸如 new TestService() 的事情。</description></item><item><title>开发代码质量检测工具，来给代码打打分</title><link>https://cocacolf.github.io/blog/%E5%BC%80%E5%8F%91%E4%BB%A3%E7%A0%81%E8%B4%A8%E9%87%8F%E6%A3%80%E6%B5%8B%E5%B7%A5%E5%85%B7/</link><pubDate>Fri, 25 Jun 2021 00:00:00 +0000</pubDate><guid>https://cocacolf.github.io/blog/%E5%BC%80%E5%8F%91%E4%BB%A3%E7%A0%81%E8%B4%A8%E9%87%8F%E6%A3%80%E6%B5%8B%E5%B7%A5%E5%85%B7/</guid><description>TL;DR 最近这一个多月，我和组长一起做了一个代码质量检测工具，我们把它叫做质量模型，取名叫 bcode。
工具对外是一个 npm 包，安装后在项目目录下执行 bcode check [文件夹]，便会扫描代码并上传报告，可打开命令行中输出的链接指向的页面获得代码分数和报告。
当前这个工具经过足够的测试，即将对内推出1.0版本提供使用。未来计划当我们所有规划的 feature 完成后，对外开源。
本文主要内容只涉及命令行部分。
代码扫描的维度 bcode 会从以下几个维度来检测代码：
代码重复度。即复制粘贴的代码比例 代码拼写检查。即将代码中拼写有误的单词都找出来 代码可维护性。即一个代码好不好维护，复杂度高不高 代码安全性。这个安全性非狭义的安全漏洞，且包括譬如&amp;quot;输入密码栏必须使用type=password，保证密码用掩码方式显示&amp;quot;等 最佳实践。即内置一些最佳实践，扫描后提示开发人员哪些地方有更好的做法或库有更好的替代品推荐等 整体架构 从整体来看，整个质量模型当前由三部分组成：
bcode-cli 负责扫描代码，生成报告数据上报给 bcode-server
bcode-server 负责处理上报数据，根据模型计算出得分并存储到数据库。同时对 bcode-client 提供 API 接口
bcode-client 是一个对所有报告展示的网页，点击每个报告后可查看报告详情；同时还可以执行将认为误报的单词进行上报等操作
我主要负责 bcode-cli 和 bcode-server 的开发。cli 使用 TypeScript 和 Node.js 开发；server 使用 Nest.js 和 MongoDB 开发。
cli 部分 整体架构 cli部分整体架构如下：
基本信息获取 基本信息主要是获取如下信息：
项目被扫描目录路径 项目的 git 仓库地址。这个通过分析 .</description></item><item><title>编写命令行工具升级eslint配置</title><link>https://cocacolf.github.io/blog/%E7%BC%96%E5%86%99%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7%E5%8D%87%E7%BA%A7eslint%E9%85%8D%E7%BD%AE/</link><pubDate>Tue, 08 Jun 2021 00:00:00 +0000</pubDate><guid>https://cocacolf.github.io/blog/%E7%BC%96%E5%86%99%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7%E5%8D%87%E7%BA%A7eslint%E9%85%8D%E7%BD%AE/</guid><description>前段时间，我们组对旧的 eslint 规则做了一次改造，推出了新的 eslint 规则。为了让从旧往新的过度更顺畅，同时让使用者的改造意愿更强，我们提供了命令行无缝升级，只需要执行 idux-cli init 即可完成配置升级或初始化。组长把这个叫做 开发者体验。
 配置升级的本质是：将无用的旧配置去掉，有用配置保留，再将旧配置和新规则进行合并生成新配置文件。
 首先有一个标准的 eslint 配置作为升级后的目标配置，大概如下(用xxx替换了一些缩写信息)：
module.exports = { root: true, parserOptions: { // ts的项目 或者 ts+vue的项目启用 parser: &amp;#39;@typescript-eslint/parser&amp;#39; }, extends: [ &amp;#39;@xxx/base&amp;#39;, // 基础规则，必须启用 &amp;#39;@xxx/vue&amp;#39;, // 使用 vue 需要启用 &amp;#39;@xxx/vue2&amp;#39;, // 使用 vue2 需要启用 &amp;#39;@xxx/vue3&amp;#39;, // 使用 vue3 需要启用 &amp;#39;@xxx/typescript&amp;#39;, // 使用 typescript 需要启用 &amp;#39;@xxx/i18n&amp;#39;, // 老版本国际化需要启用 &amp;#39;@xxx/jsformat&amp;#39;, // 格式化相关 &amp;#39;@xxx/vueformat&amp;#39;, // 格式化相关 &amp;#39;@xxx/tsformat&amp;#39;, // 格式化相关 ], env: { }, globals: { }, rules: { // Customize your rules }, };  从配置里可以看出来，新配置的生成和以下几个因素有关：</description></item><item><title>分析文件夹生成文档页面</title><link>https://cocacolf.github.io/blog/%E5%88%86%E6%9E%90%E6%96%87%E4%BB%B6%E5%A4%B9%E7%94%9F%E6%88%90%E6%96%87%E6%A1%A3%E9%A1%B5%E9%9D%A2/</link><pubDate>Tue, 13 Apr 2021 00:00:00 +0000</pubDate><guid>https://cocacolf.github.io/blog/%E5%88%86%E6%9E%90%E6%96%87%E4%BB%B6%E5%A4%B9%E7%94%9F%E6%88%90%E6%96%87%E6%A1%A3%E9%A1%B5%E9%9D%A2/</guid><description>背景  最近小组在做 eslint 相关的升级改造，同时我们需要搭建一个平台，其内容为文档和一些好坏写法的代码展示等。
 为了让日后平台的维护者更好的维护文档，或者说只需要编写或删除文档，而不用修改代码，因此需要将文档自动化处理，和代码分离。
新增或删除文档只需要在对应的文件夹下新增或删除文档文件即可 平台代码 build 的时候会自动处理 /docs 文件夹下的文档，生成配置文件，我们只需要在某个文档组件里引用该配置文件即可生成文档页面  由于在内网开发的我也不好截图，但是其效果和 Vue 官网这个效果基本一致：点击顶部某个导航栏，页面左侧为目录层级，右侧为文档信息。
build时处理文档  首先有两个约定：
所有的文档都放在 /docs 下，按照目录放好。比如 /docs/Vue/基础/安装.md 生成的目录结构为：一级为分类，二级为标题，三级为文档下的标题  这个平台技术栈为 Vite 和 Vue。
markdown to vue
 我们需要把 md 文档当成 Vue 组件渲染在页面上，因此配置一下 vite.config.js：
import { defineConfig } from &amp;#39;vite&amp;#39;; import vue from &amp;#39;@vitejs/plugin-vue&amp;#39;; import Markdown from &amp;#39;vite-plugin-md&amp;#39;; export default defineConfig({ plugins: [ vue({ include: [/\.vue$/, /\.md$/], }), Markdown({ markdownItSetup(md) { md.</description></item><item><title>vue-router重复点击报错和新链接跳转失败</title><link>https://cocacolf.github.io/blog/vue-router-issues/</link><pubDate>Thu, 14 Jan 2021 00:00:00 +0000</pubDate><guid>https://cocacolf.github.io/blog/vue-router-issues/</guid><description>最近解决了项目的前端路由问题，具体而言有两个：
路由重复点击，会在控制台输出报错 一个 vue-router 渲染出来的 a 标签，右键新链接打开，在新页面无法打开网页 由于我们公司内外网隔离，所以无法具体截图现象。
路由重复点击，会在控制台输出报错 报错的大概内容为： vueAll.js?v=3.0:2 Uncaught (in promise) NavigationDuplicated: Avoided redundant navigation to current location: xxxx。
阅读 vue-router 的文档，可以看到：
router.push 或 router.replace 将返回一个 Promise
查看 vue-router 源码，从源码此处可以看出，我们对此方法进行异常处理，便可一劳永逸解决此问题。
因此在初始化路由时，对此方法进行处理：
import VueRouter from &amp;#39;vue-router&amp;#39;; function handleRouterErr (methodsList) { methodsList.forEach(item =&amp;gt; { const ORIGIN_METHOD = VueRouter.prototype[item]; VueRouter.prototype[item] = function (location) { let vm = this; return ORIGIN_METHOD.call(vm, location).catch(err =&amp;gt; err); } }); } // 调用 handleRouterErr([&amp;#39;push&amp;#39;, &amp;#39;replace&amp;#39;]) 无法在新标签页打开链接 右键一个 vue-router 渲染的 a 标签，新标签页打开后页面显示 Not Found。</description></item><item><title>实现类桑基图展示数据关系</title><link>https://cocacolf.github.io/blog/%E5%AE%9E%E7%8E%B0%E7%B1%BB%E6%A1%91%E5%9F%BA%E5%9B%BE%E6%95%88%E6%9E%9C/</link><pubDate>Tue, 01 Sep 2020 00:00:00 +0000</pubDate><guid>https://cocacolf.github.io/blog/%E5%AE%9E%E7%8E%B0%E7%B1%BB%E6%A1%91%E5%9F%BA%E5%9B%BE%E6%95%88%E6%9E%9C/</guid><description>最近开发的页面中，有如下所示的板块，它展示了左右两侧信息的数据关系。
左边是类似表格的列表，每一行右侧有一根比例图柱子，可以看到柱子有黄色和蓝色两种颜色分层 右侧是存储设备全局的信息，这个设备分为性能层和容量层，水球图一黄一蓝来区分 左侧和右侧中间有一条顺滑的曲线从左侧的每一根柱子连接到右侧，柱子的起点的颜色连接同色的右侧水球。连线的宽度和柱子颜色的比例成正比，同时这里有个看不出来的动态效果——每根连线里有一颗“能量球”沿着连线流动 最初，交互设计师和我说这种设计图叫桑基图。我检索后，发现 ECharts 就有桑基图效果，于是我想可以基于其进行二次开发。在阅读文档后，我发现 ECharts 的桑基图可以自定义的部分不多，非常不灵活，我们的左侧和右侧板块的效果完全无法实现。好了，那就自己来了。
分析 将整个设计抽象为三个组件：
左侧类似于表格的组件 中间绘图（连线）区域 右侧分层容量展示区域 左侧和右侧很好实现，因此问题在于连线部分。连线部分主要有两点：
左侧”表格“中每一行的右边框那根柱子，黄色的容量要连上右侧容量展示区域的黄色球，蓝色连上蓝色球 连线需要和尺寸无关，即浏览器缩放，连线依然准确。换言之，连线坐标不能写死，要动态计算 实现 实现连线我有两种方案可选： Canvas 或 Svg 实现。我发现这个场景特别适合 Svg，因为它和 HTML 可以结合得很好，而且连线的绘制非常简单，使用它提供的 path 标签即可连线。两点确定一条线，那么问题的关键就成了如何确定起始坐标。
结构设计
从 HTML 结构自上而下来说，整个视图分为两层：
第一层是组件层，即容纳左侧“表格”和右侧球信息的层 第二层是 Svg 连线层 这两层都容纳在同一个大容器内，每一层的宽度和高度都和最外层的容器一样大小。这里必须要将连线层放在组件层之下，因为如果不这样，那么组件层中像鼠标悬浮到某个元素显示信息气泡的效果就无法实现，因为鼠标悬浮到的实际上是连线层。
&amp;lt;div class=&amp;#34;container&amp;#34;&amp;gt; &amp;lt;line /&amp;gt; &amp;lt;component-layer /&amp;gt; &amp;lt;/div&amp;gt; 连线
开始绘制连线，以左侧某一行和右侧连接为例：
如何获取起点？起点是左侧柱子的位置坐标，我们可以通过获取柱子的 dom 元素，使用 getBoundingClientRect api 获取这个元素相对于容器的位置信息 leftSide，那么这个柱子的位置则是 (leftSide.right, leftSide.top)。
同理获取终点坐标 (rightSide.right, rightSide.top)。
这里有个要注意的事情，我们连线是使用 Svg path 连线，那么这个坐标信息应当是相对于 Svg 层的位置。即我们要从 Svg 的起点到我们算出来的某个点的位置需要平移多少，因此我们也需要用同样的方式得到 Svg 层的坐标信息 SvgPosition。</description></item><item><title>简单版html模板引擎</title><link>https://cocacolf.github.io/blog/%E7%AE%80%E5%8D%95%E7%89%88html%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/</link><pubDate>Thu, 17 Oct 2019 00:00:00 +0000</pubDate><guid>https://cocacolf.github.io/blog/%E7%AE%80%E5%8D%95%E7%89%88html%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/</guid><description>背景 功能中包含一个历史申请记录的显示页面，简笔画简单画了一下，如下所示：
不知道多久没写过字了，画下来的东西着实丑，既然不能绘色，那就绘声一下。 每一条记录对应一个面板，每一个面板上呈现着对应记录的信息。那么不同的审批状态，就有很多东西不一样：
数据，这个没得说 内容的样式。比如审批成功用绿色标识，失败是红色 操作。比如审批中，那么就有一个撤销申请的按钮；其他的状态，就没有这个按钮，但是有一个面板折叠的按钮 面板左侧有状态条，反映当前的状态，同时也是时间线的作用 。。。 这个历史申请的数据是用XML格式传递的，如下所示：
&amp;lt;?xml version=\&amp;#34;1.0\&amp;#34; encoding=\&amp;#34;utf-8\&amp;#34;?&amp;gt; &amp;lt;Expansion&amp;gt; &amp;lt;Result&amp;gt;0&amp;lt;/Result&amp;gt; &amp;lt;ApplicationRecord&amp;gt; &amp;lt;record id=&amp;#34;1&amp;#34; status=&amp;#34;0&amp;#34; apply_cpu=&amp;#34;4&amp;#34; apply_mem=&amp;#34;8&amp;#34; apply_disk=&amp;#34;256&amp;#34; apply_time=&amp;#34;2019-10-14 20:00&amp;#34; approve_time=&amp;#34;2019-10-15 15:00&amp;#34; apply_reason=&amp;#34;卡得不能用了&amp;#34; approve_reason=&amp;#34;满足你&amp;#34; admin_name=&amp;#34;XXX&amp;#34; admin_phone=&amp;#34;2333333&amp;#34; admin_email=&amp;#34;test@gmail.com&amp;#34;/&amp;gt; &amp;lt;record id=&amp;#34;2&amp;#34; status=&amp;#34;2&amp;#34; apply_cpu=&amp;#34;4&amp;#34; apply_mem=&amp;#34;8&amp;#34; apply_disk=&amp;#34;256&amp;#34; apply_time=&amp;#34;2019-10-14 20:00&amp;#34; approve_time=&amp;#34;2019-10-15 15:00&amp;#34; apply_reason=&amp;#34;卡得不能用了&amp;#34; approve_reason=&amp;#34;那就继续卡着吧&amp;#34; admin_name=&amp;#34;XXX&amp;#34; admin_phone=&amp;#34;2333333&amp;#34; admin_email=&amp;#34;test@gmail.com&amp;#34;/&amp;gt; &amp;lt;/ApplicationRecord&amp;gt; &amp;lt;/Expansion&amp;gt; 所以很明显，要去遍历解析这个XML，去循环创建面板，再根据每条记录里对应的字段，写上正确的内容以及设置不同的样式。
由于某些原因，没有使用任何样式库或者框架，使用原生js编写。
以上是背景。
思路 当然这个需求没有难点，最一般的方法，当然就是html字符串拼接，在大量的 js if else逻辑里，将不同的数据和html片段拼接起来。其中一个片段可能是这样：
var data = {}; // 数据 var str = &amp;#39;&amp;#39;; // html拼接 if(data.</description></item><item><title>组内Node.js分享</title><link>https://cocacolf.github.io/blog/%E7%BB%84%E5%86%85node.js%E5%88%86%E4%BA%AB/</link><pubDate>Thu, 22 Aug 2019 00:00:00 +0000</pubDate><guid>https://cocacolf.github.io/blog/%E7%BB%84%E5%86%85node.js%E5%88%86%E4%BA%AB/</guid><description>昨天得知今天要进行小组分享，但是我内心并不慌张。关于今天的分享“当我在学习Node时，我在学什么”，是自己一路学习的心得体会，即便临场讲述也能言之有物。
聊什么  其实在两周前，我报名分享时，我打算自下而上来分享Node，从底层架构到上层应用，但后来我可以很明显的预知到这样分享的效果会不好。所以我改变了分享的内容，同时由于时间原因，这次分享侧重点并不是在讲述Node是什么，以及Node Api相关的东西，我也相信以大家的自学能力，入门并不是问题。我今天分享的是个人在初期学习Node的过程中的经历、感受。
说说历史  我喜欢听故事也喜欢讲故事，所以我还是想从最开始说起。那是2009年，Ryan Dahl想写一个基于事件驱动和非阻塞IO的高性能服务器，他尝试了许多语言来构建，比如C、Lua、Haskell等，但由于自己hold不住或语言本身已存在这些东西，他最后瞄向了没有历史包袱的Javascript，从而创建了Node。但要注意的是，Node并不是一门语言，只是一个Javascript的运行时，可以理解为PythonVM之于Python，JVM之于Java。
特点  异步IO和基于事件和回调函数。比如在Node中使用文件模块读取文件:
fs.readFile(&amp;#39;./1.txt&amp;#39;, (err, data) =&amp;gt; { console.log(data); }); fs.readFile(&amp;#39;./2.txt&amp;#39;, (err, data) =&amp;gt; { console.log(data); }); 对于这种风格显然我们不陌生，比如：
oneDom.addEventListener(&amp;#39;click&amp;#39;, function() { // do something }); $.get(&amp;#39;/url&amp;#39;, function(data) =&amp;gt; { // do something }) 这种异步IO，带来的好处就是性能更快，它的耗时取决于最慢的操作，但是也带来了成本，一是异步风格带来的理解成本，因为编码顺序和执行顺序并不一致；二是错误的处理。
另外，我们可以看到代码风格是基于事件和回调函数风格，再举一个例子，使用原生http模块来接收post数据时：
let str = &amp;#39;&amp;#39;; req.on(&amp;#39;data&amp;#39;, (trunk) =&amp;gt; { str += trunk; }); req.on(&amp;#39;end&amp;#39;, () =&amp;gt; { res.end(str); }); 这种基于事件的回调风格可以有一些优点，也是我个人最喜欢Node的地方，Don't Call Me, I Wll Call You。这种风格可以带来轻解耦，我们只需要关注事务即可。但是也有一些不足，比如每个事件事务相对独立，如果事件之间要彼此协作就不太方便。</description></item><item><title>Node.js Event Loop</title><link>https://cocacolf.github.io/blog/node.js-event-loop/</link><pubDate>Sun, 28 Apr 2019 00:00:00 +0000</pubDate><guid>https://cocacolf.github.io/blog/node.js-event-loop/</guid><description>第一次接触Node的时候就喜欢上它了，但是那时候学习它的时候，一直感觉入不了门，会写一点但总感觉隔了层膜，挺难受的，后来的渐渐有所感觉是在简单的了解了事件驱动后。再后来就觉得JS层面的Node其实没有太多的东西，于是开始想要去了解下层一点的东西。最近看了一篇非常好的博文，在这里做几点记录。
什么是事件循环 event Demultiplexer来处理事件分发，同时把IO操作委托给硬件。它是一种抽象，各操作系统有自己的实现(Linux -&amp;gt; epoll,MacOS -&amp;gt; kqueue,Windows -&amp;gt; IOCP)。为了支持不同的操作系统中不同的IO操作，于是诞生了libuv。
当IO操作被处理时，相对应的回调函数就被加入事件队列
事件队列执行并清空事件队列
循环上述过程
事件队列 简化的事件循环的执行阶段顺序
 这里有几个要点:
有两个中间过渡检查: process.nextTick 和 process.resolve，且前者优先级大于后者
next tick 队列始终不为空导致IO饿死的问题
Timers并不一定会准确执行，与CPU性能和当前所处的事件阶段有关
两个很经典的例子
// 执行顺序不能保证 setTimeout(function() { console.log(&amp;#39;setTimeout&amp;#39;); }, 0); setImmediate(function() { console.log(&amp;#39;setImmediate&amp;#39;); }); // setImmediate 一定在 setTimeout 之前执行 const fs = require(&amp;#39;fs&amp;#39;); fs.readFile(__filename, () =&amp;gt; { setTimeout(() =&amp;gt; { console.</description></item><item><title>什么才算是真正的编程能力</title><link>https://cocacolf.github.io/blog/%E4%BB%80%E4%B9%88%E6%98%AF%E7%9C%9F%E6%AD%A3%E7%9A%84%E7%BC%96%E7%A8%8B%E8%83%BD%E5%8A%9B/</link><pubDate>Sun, 05 Feb 2017 00:00:00 +0000</pubDate><guid>https://cocacolf.github.io/blog/%E4%BB%80%E4%B9%88%E6%98%AF%E7%9C%9F%E6%AD%A3%E7%9A%84%E7%BC%96%E7%A8%8B%E8%83%BD%E5%8A%9B/</guid><description>转自这里
 非常好的一个问题。这可能是我在知乎见到过的问编程有关的问题中问得最好的一个了。我非常喜欢这个问题。
 计算机科学有两类根本问题。一类是理论：算法，数据结构，复杂度，机器学习，模式识别，等等等。一类是系统：操作系统，网络系统，分布式系统，存储系统，游戏引擎，等等等等。
 理论走的是深度，是在追问在给定的计算能力约束下如何把一个问题解决得更快更好。而系统走的是广度，是在追问对于一个现实的需求如何在众多的技术中设计出最多快好省的技术组合。
 搞ACM的人，只练第一类。像你这样的更偏向于第二类。其实挺难得的，但很可惜的是第二类能力没有简单高效的测量考察方法，不像算法和数据结构有ACM竞赛，所以很多系统的苗子都因为缺少激励和正确引导慢慢就消隐了。
 所以比尔盖茨才会说，看到现在学编程的人经常都把编程看作解各种脑筋急转弯的问题，他觉得很遗憾。
 做系统，确实不提倡“重复发明轮子”。但注意，是不提倡“重复发明”，不是不提倡“重新制造”。恰恰相反的，我以为，系统的编程能力正体现在“重新制造”的能力。
 能把已有的部件接起来，这很好。但当你恰好缺一种关键的胶水的时候，你能写出来吗？当一个已有的部件不完全符合你的需求的时候，你能改进它吗？如果你用的部件中有bug，你能把它修好吗？在网上繁多的类似功能的部件中，谁好谁坏？为什么？差别本质吗？一个开源代码库，你能把它从一个语言翻译到另一个语言吗？从一个平台移植到另一个平台吗？能准确估计自己翻译和移植的过程需要多少时间吗？能准确估计翻译和移植之后性能是会有提升还是会有所下降吗？
 系统编程能力体现在把已有的代码拿来并变成更好的代码，体现在把没用的代码拿来并变成有用的代码，体现在把一个做好的轮子拿来能画出来轮子的设计蓝图，并用道理解释出设计蓝图中哪些地方是关键的，哪些地方是次要的，哪些地方是不容触碰的，哪些地方是还可以改进的。
 如果你一点不懂理论，还是应该学点的。对于系统性能的设计上，算法和数据结构就像在自己手头的钱一样，它们不是万能的，但不懂是万万不行的。
 怎么提高系统编程能力呢？土办法：多造轮子。就像学画画要画鸡蛋一样，不是这世界上没有人会画鸡蛋，但画鸡蛋能驯服手指，感受阴影线条和笔触。所以，自己多写点东西吧。写个编译器？渲染器？操作系统？web服务器？web浏览器？部件都一个个换成自己手写的，然后和已有的现成部件比一比，看看谁的性能好，谁的易用性好？好在哪儿？差在哪儿？为什么？
 更聪明一点的办法：多拆轮子。多研究别人的代码是怎么写的。然而这个实践起来经常很难。原因：大部分工业上用的轮子可能设计上的思想和技术是好的，都设计和制造过程都很烂，里面乱成一团，让人乍一看毫无头绪，导致其对新手来说非常难拆。这种状况其实非常糟糕。所以，此办法一般只对比较简单的轮子好使，对于复杂的轮子，请量力而行。
 轮子不好拆，其实是一个非常严重的问题。重复发明轮子固然是时间的浪费，但当轮子复杂而又不好拆的时候，尤其是原来造轮子的人已经不在场的时候，重新发明和建造轮子往往会成为无奈之下最好的选择。这是为什么工业界在明知道重复发明/制造轮子非常不好的情况下还在不断重复发明/制造轮子的根本原因。 程序本质是逻辑演绎的形式化表达，记载的是人类对这个世界的数字化理解。不能拆的轮子就像那一篇篇丢了曲谱的宋词一样，能读，却不能唱。
 鄙人不才，正在自己研究怎么设计建造一种既好用又好拆的轮子。您没那么幸运，恐怕是等不到鄙人的技术做出来并发扬光大了。在那之前，多造轮子，多拆好拆的小轮子，应该是提高编程能力最好的办法了。
 以上。嗯。 （文章属个人观点，与本人工作雇主无关。）</description></item></channel></rss>