<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>programming on CocaColf</title><link>https://cocacolf.github.io/tags/programming/</link><description>Recent content in programming on CocaColf</description><generator>Hugo -- gohugo.io</generator><copyright>&amp;copy; 2020 CocaColf</copyright><lastBuildDate>Tue, 13 Apr 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://cocacolf.github.io/tags/programming/index.xml" rel="self" type="application/rss+xml"/><item><title>分析文件夹生成文档页面</title><link>https://cocacolf.github.io/blog/%E5%88%86%E6%9E%90%E6%96%87%E4%BB%B6%E5%A4%B9%E7%94%9F%E6%88%90%E6%96%87%E6%A1%A3%E9%A1%B5%E9%9D%A2/</link><pubDate>Tue, 13 Apr 2021 00:00:00 +0000</pubDate><guid>https://cocacolf.github.io/blog/%E5%88%86%E6%9E%90%E6%96%87%E4%BB%B6%E5%A4%B9%E7%94%9F%E6%88%90%E6%96%87%E6%A1%A3%E9%A1%B5%E9%9D%A2/</guid><description>背景  最近小组在做 eslint 相关的升级改造，同时我们需要搭建一个平台，其内容为文档和一些好坏写法的代码展示等。
 为了让日后平台的维护者更好的维护文档，或者说只需要编写或删除文档，而不用修改代码，因此需要将文档自动化处理，和代码分离。
新增或删除文档只需要在对应的文件夹下新增或删除文档文件即可 平台代码 build 的时候会自动处理 /docs 文件夹下的文档，生成配置文件，我们只需要在某个文档组件里引用该配置文件即可生成文档页面  由于在内网开发的我也不好截图，但是其效果和 Vue 官网这个效果基本一致：点击顶部某个导航栏，页面左侧为目录层级，右侧为文档信息。
build时处理文档  首先有两个约定：
所有的文档都放在 /docs 下，按照目录放好。比如 /docs/Vue/基础/安装.md 生成的目录结构为：一级为分类，二级为标题，三级为文档下的标题  这个平台技术栈为 Vite 和 Vue。
markdown to vue
 我们需要把 md 文档当成 Vue 组件渲染在页面上，因此配置一下 vite.config.js：
import { defineConfig } from &amp;#39;vite&amp;#39;; import vue from &amp;#39;@vitejs/plugin-vue&amp;#39;; import Markdown from &amp;#39;vite-plugin-md&amp;#39;; export default defineConfig({ plugins: [ vue({ include: [/\.vue$/, /\.md$/], }), Markdown({ markdownItSetup(md) { md.</description></item><item><title>vue-router重复点击报错和新链接跳转失败</title><link>https://cocacolf.github.io/blog/vue-router-issues/</link><pubDate>Thu, 14 Jan 2021 00:00:00 +0000</pubDate><guid>https://cocacolf.github.io/blog/vue-router-issues/</guid><description>最近解决了项目的前端路由问题，具体而言有两个：
路由重复点击，会在控制台输出报错 一个 vue-router 渲染出来的 a 标签，右键新链接打开，在新页面无法打开网页 由于我们公司内外网隔离，所以无法具体截图现象。
路由重复点击，会在控制台输出报错 报错的大概内容为： vueAll.js?v=3.0:2 Uncaught (in promise) NavigationDuplicated: Avoided redundant navigation to current location: xxxx。
阅读 vue-router 的文档，可以看到：
router.push 或 router.replace 将返回一个 Promise
查看 vue-router 源码，从源码此处可以看出，我们对此方法进行异常处理，便可一劳永逸解决此问题。
因此在初始化路由时，对此方法进行处理：
import VueRouter from &amp;#39;vue-router&amp;#39;; function handleRouterErr (methodsList) { methodsList.forEach(item =&amp;gt; { const ORIGIN_METHOD = VueRouter.prototype[item]; VueRouter.prototype[item] = function (location) { let vm = this; return ORIGIN_METHOD.call(vm, location).catch(err =&amp;gt; err); } }); } // 调用 handleRouterErr([&amp;#39;push&amp;#39;, &amp;#39;replace&amp;#39;]) 无法在新标签页打开链接 右键一个 vue-router 渲染的 a 标签，新标签页打开后页面显示 Not Found。</description></item><item><title>简单版html模板引擎</title><link>https://cocacolf.github.io/blog/%E7%AE%80%E5%8D%95%E7%89%88html%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/</link><pubDate>Thu, 17 Oct 2019 00:00:00 +0000</pubDate><guid>https://cocacolf.github.io/blog/%E7%AE%80%E5%8D%95%E7%89%88html%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/</guid><description>背景 功能中包含一个历史申请记录的显示页面，简笔画简单画了一下，如下所示：
不知道多久没写过字了，画下来的东西着实丑，既然不能绘色，那就绘声一下。 每一条记录对应一个面板，每一个面板上呈现着对应记录的信息。那么不同的审批状态，就有很多东西不一样：
数据，这个没得说 内容的样式。比如审批成功用绿色标识，失败是红色 操作。比如审批中，那么就有一个撤销申请的按钮；其他的状态，就没有这个按钮，但是有一个面板折叠的按钮 面板左侧有状态条，反映当前的状态，同时也是时间线的作用 。。。 这个历史申请的数据是用XML格式传递的，如下所示：
&amp;lt;?xml version=\&amp;#34;1.0\&amp;#34; encoding=\&amp;#34;utf-8\&amp;#34;?&amp;gt; &amp;lt;Expansion&amp;gt; &amp;lt;Result&amp;gt;0&amp;lt;/Result&amp;gt; &amp;lt;ApplicationRecord&amp;gt; &amp;lt;record id=&amp;#34;1&amp;#34; status=&amp;#34;0&amp;#34; apply_cpu=&amp;#34;4&amp;#34; apply_mem=&amp;#34;8&amp;#34; apply_disk=&amp;#34;256&amp;#34; apply_time=&amp;#34;2019-10-14 20:00&amp;#34; approve_time=&amp;#34;2019-10-15 15:00&amp;#34; apply_reason=&amp;#34;卡得不能用了&amp;#34; approve_reason=&amp;#34;满足你&amp;#34; admin_name=&amp;#34;XXX&amp;#34; admin_phone=&amp;#34;2333333&amp;#34; admin_email=&amp;#34;test@gmail.com&amp;#34;/&amp;gt; &amp;lt;record id=&amp;#34;2&amp;#34; status=&amp;#34;2&amp;#34; apply_cpu=&amp;#34;4&amp;#34; apply_mem=&amp;#34;8&amp;#34; apply_disk=&amp;#34;256&amp;#34; apply_time=&amp;#34;2019-10-14 20:00&amp;#34; approve_time=&amp;#34;2019-10-15 15:00&amp;#34; apply_reason=&amp;#34;卡得不能用了&amp;#34; approve_reason=&amp;#34;那就继续卡着吧&amp;#34; admin_name=&amp;#34;XXX&amp;#34; admin_phone=&amp;#34;2333333&amp;#34; admin_email=&amp;#34;test@gmail.com&amp;#34;/&amp;gt; &amp;lt;/ApplicationRecord&amp;gt; &amp;lt;/Expansion&amp;gt; 所以很明显，要去遍历解析这个XML，去循环创建面板，再根据每条记录里对应的字段，写上正确的内容以及设置不同的样式。
由于某些原因，没有使用任何样式库或者框架，使用原生js编写。
以上是背景。
思路 当然这个需求没有难点，最一般的方法，当然就是html字符串拼接，在大量的 js if else逻辑里，将不同的数据和html片段拼接起来。其中一个片段可能是这样：
var data = {}; // 数据 var str = &amp;#39;&amp;#39;; // html拼接 if(data.</description></item><item><title>Node.js Event Loop</title><link>https://cocacolf.github.io/blog/node.js-event-loop/</link><pubDate>Sun, 28 Apr 2019 00:00:00 +0000</pubDate><guid>https://cocacolf.github.io/blog/node.js-event-loop/</guid><description>第一次接触Node的时候就喜欢上它了，但是那时候学习它的时候，一直感觉入不了门，会写一点但总感觉隔了层膜，挺难受的，后来的渐渐有所感觉是在简单的了解了事件驱动后。再后来就觉得JS层面的Node其实没有太多的东西，于是开始想要去了解下层一点的东西。最近看了一篇非常好的博文，在这里做几点记录。
什么是事件循环 event Demultiplexer来处理事件分发，同时把IO操作委托给硬件。它是一种抽象，各操作系统有自己的实现(Linux -&amp;gt; epoll,MacOS -&amp;gt; kqueue,Windows -&amp;gt; IOCP)。为了支持不同的操作系统中不同的IO操作，于是诞生了libuv。
当IO操作被处理时，相对应的回调函数就被加入事件队列
事件队列执行并清空事件队列
循环上述过程
事件队列 简化的事件循环的执行阶段顺序
 这里有几个要点:
有两个中间过渡检查: process.nextTick 和 process.resolve，且前者优先级大于后者
next tick 队列始终不为空导致IO饿死的问题
Timers并不一定会准确执行，与CPU性能和当前所处的事件阶段有关
两个很经典的例子
// 执行顺序不能保证 setTimeout(function() { console.log(&amp;#39;setTimeout&amp;#39;); }, 0); setImmediate(function() { console.log(&amp;#39;setImmediate&amp;#39;); }); // setImmediate 一定在 setTimeout 之前执行 const fs = require(&amp;#39;fs&amp;#39;); fs.readFile(__filename, () =&amp;gt; { setTimeout(() =&amp;gt; { console.</description></item><item><title>什么才算是真正的编程能力</title><link>https://cocacolf.github.io/blog/%E4%BB%80%E4%B9%88%E6%98%AF%E7%9C%9F%E6%AD%A3%E7%9A%84%E7%BC%96%E7%A8%8B%E8%83%BD%E5%8A%9B/</link><pubDate>Sun, 05 Feb 2017 00:00:00 +0000</pubDate><guid>https://cocacolf.github.io/blog/%E4%BB%80%E4%B9%88%E6%98%AF%E7%9C%9F%E6%AD%A3%E7%9A%84%E7%BC%96%E7%A8%8B%E8%83%BD%E5%8A%9B/</guid><description>转自这里
 非常好的一个问题。这可能是我在知乎见到过的问编程有关的问题中问得最好的一个了。我非常喜欢这个问题。
 计算机科学有两类根本问题。一类是理论：算法，数据结构，复杂度，机器学习，模式识别，等等等。一类是系统：操作系统，网络系统，分布式系统，存储系统，游戏引擎，等等等等。
 理论走的是深度，是在追问在给定的计算能力约束下如何把一个问题解决得更快更好。而系统走的是广度，是在追问对于一个现实的需求如何在众多的技术中设计出最多快好省的技术组合。
 搞ACM的人，只练第一类。像你这样的更偏向于第二类。其实挺难得的，但很可惜的是第二类能力没有简单高效的测量考察方法，不像算法和数据结构有ACM竞赛，所以很多系统的苗子都因为缺少激励和正确引导慢慢就消隐了。
 所以比尔盖茨才会说，看到现在学编程的人经常都把编程看作解各种脑筋急转弯的问题，他觉得很遗憾。
 做系统，确实不提倡“重复发明轮子”。但注意，是不提倡“重复发明”，不是不提倡“重新制造”。恰恰相反的，我以为，系统的编程能力正体现在“重新制造”的能力。
 能把已有的部件接起来，这很好。但当你恰好缺一种关键的胶水的时候，你能写出来吗？当一个已有的部件不完全符合你的需求的时候，你能改进它吗？如果你用的部件中有bug，你能把它修好吗？在网上繁多的类似功能的部件中，谁好谁坏？为什么？差别本质吗？一个开源代码库，你能把它从一个语言翻译到另一个语言吗？从一个平台移植到另一个平台吗？能准确估计自己翻译和移植的过程需要多少时间吗？能准确估计翻译和移植之后性能是会有提升还是会有所下降吗？
 系统编程能力体现在把已有的代码拿来并变成更好的代码，体现在把没用的代码拿来并变成有用的代码，体现在把一个做好的轮子拿来能画出来轮子的设计蓝图，并用道理解释出设计蓝图中哪些地方是关键的，哪些地方是次要的，哪些地方是不容触碰的，哪些地方是还可以改进的。
 如果你一点不懂理论，还是应该学点的。对于系统性能的设计上，算法和数据结构就像在自己手头的钱一样，它们不是万能的，但不懂是万万不行的。
 怎么提高系统编程能力呢？土办法：多造轮子。就像学画画要画鸡蛋一样，不是这世界上没有人会画鸡蛋，但画鸡蛋能驯服手指，感受阴影线条和笔触。所以，自己多写点东西吧。写个编译器？渲染器？操作系统？web服务器？web浏览器？部件都一个个换成自己手写的，然后和已有的现成部件比一比，看看谁的性能好，谁的易用性好？好在哪儿？差在哪儿？为什么？
 更聪明一点的办法：多拆轮子。多研究别人的代码是怎么写的。然而这个实践起来经常很难。原因：大部分工业上用的轮子可能设计上的思想和技术是好的，都设计和制造过程都很烂，里面乱成一团，让人乍一看毫无头绪，导致其对新手来说非常难拆。这种状况其实非常糟糕。所以，此办法一般只对比较简单的轮子好使，对于复杂的轮子，请量力而行。
 轮子不好拆，其实是一个非常严重的问题。重复发明轮子固然是时间的浪费，但当轮子复杂而又不好拆的时候，尤其是原来造轮子的人已经不在场的时候，重新发明和建造轮子往往会成为无奈之下最好的选择。这是为什么工业界在明知道重复发明/制造轮子非常不好的情况下还在不断重复发明/制造轮子的根本原因。 程序本质是逻辑演绎的形式化表达，记载的是人类对这个世界的数字化理解。不能拆的轮子就像那一篇篇丢了曲谱的宋词一样，能读，却不能唱。
 鄙人不才，正在自己研究怎么设计建造一种既好用又好拆的轮子。您没那么幸运，恐怕是等不到鄙人的技术做出来并发扬光大了。在那之前，多造轮子，多拆好拆的小轮子，应该是提高编程能力最好的办法了。
 以上。嗯。 （文章属个人观点，与本人工作雇主无关。）</description></item></channel></rss>