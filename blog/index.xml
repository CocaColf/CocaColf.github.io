<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blogs on CocaColf</title><link>https://cocacolf.github.io/blog/</link><description>Recent content in Blogs on CocaColf</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 02 Jul 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://cocacolf.github.io/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>走马观Nest.js</title><link>https://cocacolf.github.io/blog/%E8%B5%B0%E9%A9%AC%E8%A7%82nest.js/</link><pubDate>Fri, 02 Jul 2021 00:00:00 +0000</pubDate><guid>https://cocacolf.github.io/blog/%E8%B5%B0%E9%A9%AC%E8%A7%82nest.js/</guid><description>TL;DR 从19年夏天偶然了解 Nest.js 至今，我已经使用它构建了三个应用，不过应用的规模都不大。每个应用之间都相隔半年以上，但每一次它给我的开发体验都是十分舒服的，它已成为目前我构建后端应用的首选框架。最近在开发代码质量检测工具的服务端时我依然选择它开发。这篇文章对 Nest.js 进行了简单的介绍，通过此文能够基本了解 Nest.js 的使用和开发。
初次接触 Nest.js，可能会觉得它的概念特别多，引入了 Providers 、Pipes 等概念。我个人觉得这些概念的出现是很自然的，而且这恰好是它最大的特点，一个后端应用从请求到达至响应的每一个环节都有具体的执行者，这种“专人专事”的方式使得项目非常清晰。
控制器 (Controllers) 在 Nest.js 中，每一个控制器是一个类，我们使用 @Controller 来标识它，配合 @Get/Post 等 method 标识，即可完成一个控制器。
import { Controller, Get } from &amp;#39;@nestjs/common&amp;#39; @Controller(&amp;#39;test&amp;#39;) export class TestController { @Get(&amp;#39;list&amp;#39;) getList (@Query(&amp;#39;name&amp;#39;) name: string) {} } 而且框架内置了非常多的 HttpStatus 和 HttpExceptions，极方便的辅助开发。
提供者 (Providers) Providers 是一个很抽象的概念，其几乎可以是任何一个类，通过依赖注入到不同的类中，让被注入对象的创建工作委托给 Nest.js 运行时，使得不同模块/类之间的使用变得非常简单。使用 @Injectable 修饰一个类，即可将其变成 Providers。
比如我们上面有了控制器，根据 MVC 思想，一般我们的业务处理会放在 M 层去处理。
// testService.ts import {Injectable} from &amp;#39;@nestjs/common&amp;#39; @Injectable() export class TestService { hanleList () { } } 那么在我们的其他模块，便可以通过依赖注入使用这个 Providers，你不需要去做诸如 new TestService() 的事情。</description></item><item><title>开发代码质量检测工具，来给代码打打分</title><link>https://cocacolf.github.io/blog/%E5%BC%80%E5%8F%91%E4%BB%A3%E7%A0%81%E8%B4%A8%E9%87%8F%E6%A3%80%E6%B5%8B%E5%B7%A5%E5%85%B7/</link><pubDate>Fri, 25 Jun 2021 00:00:00 +0000</pubDate><guid>https://cocacolf.github.io/blog/%E5%BC%80%E5%8F%91%E4%BB%A3%E7%A0%81%E8%B4%A8%E9%87%8F%E6%A3%80%E6%B5%8B%E5%B7%A5%E5%85%B7/</guid><description>TL;DR 最近这一个多月，我和组长一起做了一个代码质量检测工具，我们把它叫做质量模型，取名叫 bcode。
工具对外是一个 npm 包，安装后在项目目录下执行 bcode check [文件夹]，便会扫描代码并上传报告，可打开命令行中输出的链接指向的页面获得代码分数和报告。
当前这个工具经过足够的测试，即将对内推出1.0版本提供使用。未来计划当我们所有规划的 feature 完成后，对外开源。
本文主要内容只涉及命令行部分。
代码扫描的维度 bcode 会从以下几个维度来检测代码：
代码重复度。即复制粘贴的代码比例 代码拼写检查。即将代码中拼写有误的单词都找出来 代码可维护性。即一个代码好不好维护，复杂度高不高 代码安全性。这个安全性非狭义的安全漏洞，且包括譬如&amp;quot;输入密码栏必须使用type=password，保证密码用掩码方式显示&amp;quot;等 最佳实践。即内置一些最佳实践，扫描后提示开发人员哪些地方有更好的做法或库有更好的替代品推荐等 整体架构 从整体来看，整个质量模型当前由三部分组成：
bcode-cli 负责扫描代码，生成报告数据上报给 bcode-server
bcode-server 负责处理上报数据，根据模型计算出得分并存储到数据库。同时对 bcode-client 提供 API 接口
bcode-client 是一个对所有报告展示的网页，点击每个报告后可查看报告详情；同时还可以执行将认为误报的单词进行上报等操作
我主要负责 bcode-cli 和 bcode-server 的开发。cli 使用 TypeScript 和 Node.js 开发；server 使用 Nest.js 和 MongoDB 开发。
cli 部分 整体架构 cli部分整体架构如下：
基本信息获取 基本信息主要是获取如下信息：
项目被扫描目录路径 项目的 git 仓库地址。这个通过分析 .</description></item><item><title>我们生命的历史何存</title><link>https://cocacolf.github.io/blog/%E6%88%91%E4%BB%AC%E7%94%9F%E5%91%BD%E7%9A%84%E5%8E%86%E5%8F%B2%E4%BD%95%E5%AD%98/</link><pubDate>Fri, 25 Jun 2021 00:00:00 +0000</pubDate><guid>https://cocacolf.github.io/blog/%E6%88%91%E4%BB%AC%E7%94%9F%E5%91%BD%E7%9A%84%E5%8E%86%E5%8F%B2%E4%BD%95%E5%AD%98/</guid><description>I want to write something.
When I view GitHub activity yesterday, I aware something suddenly that It&amp;rsquo;s been a long time since I&amp;rsquo;ve seen a friend star a project. And he always star some interesting project before. So I clicked into his homepage, and I saw he had no activity during February to June.
Ok, talk something else about how we know each other by the way. I received an email when I was studying in the library, I hadn&amp;rsquo;t graduated at that time.</description></item><item><title>编写命令行工具升级eslint配置</title><link>https://cocacolf.github.io/blog/%E7%BC%96%E5%86%99%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7%E5%8D%87%E7%BA%A7eslint%E9%85%8D%E7%BD%AE/</link><pubDate>Tue, 08 Jun 2021 00:00:00 +0000</pubDate><guid>https://cocacolf.github.io/blog/%E7%BC%96%E5%86%99%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7%E5%8D%87%E7%BA%A7eslint%E9%85%8D%E7%BD%AE/</guid><description>前段时间，我们组对旧的 eslint 规则做了一次改造，推出了新的 eslint 规则。为了让从旧往新的过度更顺畅，同时让使用者的改造意愿更强，我们提供了命令行无缝升级，只需要执行 idux-cli init 即可完成配置升级或初始化。组长把这个叫做 开发者体验。
 配置升级的本质是：将无用的旧配置去掉，有用配置保留，再将旧配置和新规则进行合并生成新配置文件。
 首先有一个标准的 eslint 配置作为升级后的目标配置，大概如下(用xxx替换了一些缩写信息)：
module.exports = { root: true, parserOptions: { // ts的项目 或者 ts+vue的项目启用 parser: &amp;#39;@typescript-eslint/parser&amp;#39; }, extends: [ &amp;#39;@xxx/base&amp;#39;, // 基础规则，必须启用 &amp;#39;@xxx/vue&amp;#39;, // 使用 vue 需要启用 &amp;#39;@xxx/vue2&amp;#39;, // 使用 vue2 需要启用 &amp;#39;@xxx/vue3&amp;#39;, // 使用 vue3 需要启用 &amp;#39;@xxx/typescript&amp;#39;, // 使用 typescript 需要启用 &amp;#39;@xxx/i18n&amp;#39;, // 老版本国际化需要启用 &amp;#39;@xxx/jsformat&amp;#39;, // 格式化相关 &amp;#39;@xxx/vueformat&amp;#39;, // 格式化相关 &amp;#39;@xxx/tsformat&amp;#39;, // 格式化相关 ], env: { }, globals: { }, rules: { // Customize your rules }, };  从配置里可以看出来，新配置的生成和以下几个因素有关：</description></item><item><title>分析文件夹生成文档页面</title><link>https://cocacolf.github.io/blog/%E5%88%86%E6%9E%90%E6%96%87%E4%BB%B6%E5%A4%B9%E7%94%9F%E6%88%90%E6%96%87%E6%A1%A3%E9%A1%B5%E9%9D%A2/</link><pubDate>Tue, 13 Apr 2021 00:00:00 +0000</pubDate><guid>https://cocacolf.github.io/blog/%E5%88%86%E6%9E%90%E6%96%87%E4%BB%B6%E5%A4%B9%E7%94%9F%E6%88%90%E6%96%87%E6%A1%A3%E9%A1%B5%E9%9D%A2/</guid><description>背景  最近小组在做 eslint 相关的升级改造，同时我们需要搭建一个平台，其内容为文档和一些好坏写法的代码展示等。
 为了让日后平台的维护者更好的维护文档，或者说只需要编写或删除文档，而不用修改代码，因此需要将文档自动化处理，和代码分离。
新增或删除文档只需要在对应的文件夹下新增或删除文档文件即可 平台代码 build 的时候会自动处理 /docs 文件夹下的文档，生成配置文件，我们只需要在某个文档组件里引用该配置文件即可生成文档页面  由于在内网开发的我也不好截图，但是其效果和 Vue 官网这个效果基本一致：点击顶部某个导航栏，页面左侧为目录层级，右侧为文档信息。
build时处理文档  首先有两个约定：
所有的文档都放在 /docs 下，按照目录放好。比如 /docs/Vue/基础/安装.md 生成的目录结构为：一级为分类，二级为标题，三级为文档下的标题  这个平台技术栈为 Vite 和 Vue。
markdown to vue
 我们需要把 md 文档当成 Vue 组件渲染在页面上，因此配置一下 vite.config.js：
import { defineConfig } from &amp;#39;vite&amp;#39;; import vue from &amp;#39;@vitejs/plugin-vue&amp;#39;; import Markdown from &amp;#39;vite-plugin-md&amp;#39;; export default defineConfig({ plugins: [ vue({ include: [/\.vue$/, /\.md$/], }), Markdown({ markdownItSetup(md) { md.</description></item><item><title>2020</title><link>https://cocacolf.github.io/blog/2020/</link><pubDate>Fri, 05 Feb 2021 00:00:00 +0000</pubDate><guid>https://cocacolf.github.io/blog/2020/</guid><description>工作  在年初我提出了转岗，于是疫情暂缓复工后我便到了新的产品线。在新的产品线这一年，主要支撑了三个版本的开发，以及独自负责一个老平台的维护和需求开发。
 刚到新产品线便负责一个大版本的开发，抛去技术栈不同来说，主要挑战是业务不熟悉和异地协作，整个开发团队只有我在另一个城市。最后我执行了两个策略极大的帮助了我：
时常，有段时间甚至每天都主动给项目经理打电话，对齐进度和她的预期。保证工作在正确的方向和预期的时间节点里
和对接的开发集中在某个时间连着语音联调，相比于文字沟通，效率高太多了
 最后这个版本，我拿到了质量评级 B+，体验评级 A 的成绩。忙完版本工作后的空闲期，我做了一个“体验需求池在线统计平台”，主要目的是将设计师每个月发体验运营报告的工作进行自动化。
 下半年前期，花了一些时间修复一个老平台 xss 攻击问题。在这个工作中，主要有两个亮点：
花了半天时间修改项目使用的模板引擎源码来修复其中一种 xss 漏洞，将原本至少一周的工作量缩减到半天 将 xss 漏洞攻击修复的一些经验输出为文档给其他团队，极大的帮助到了其他团队的工作  之后的一个功能开发比较有意思，其中一个模块需要以桑基图形式将数据可视化，表达不同数据之间的联系。我本以为 Echarts 可以完成这个需求，但是通过调研后发现不满足我们的需求，最后还是自行通过 SVG 实现了桑基图的开发。早期开发完成后，我颇有成就感，不过这个模块在后半年里不断地进行需求变更，以致于我一度对这个模块产生了恶心感。这里也不得不说，我十分质疑这个产品线的产品经理的专业性。
 下半年还负责了团队业务组件库的落地，我做了三件事有效的保障了此工作在预期的时间节点完成：
提前梳理出产品的所有业务组件，整理成文档交付给设计师，作为业务组件库建立基础，大大减少了设计师整理的工作量
在落地过程中，和设计师一起识别并讨论业务组件，产出了协作文档和开发流程
承担了13个业务组件的开发
 最后组件库的工作获得 “超出预期” 的评价。
 整体来看，今年工作做得不错，在二季度和三季度都拿到了公司级别的奖项；绩效考核我也拿到了工作两年来的最佳绩效。最不满意的还是沟通能力，一个是自己的对问题的表达还是太啰嗦，不精炼；另一个是和项目相关干系人的沟通上，做得不够，很多信息有偏差。
 2021年我的工作内容又将发生变化，离开此产品线去往公共组。不做业务开发，有了技术自由似乎是一件很棒的事情，此前我也是这么认为的，不过现在我有了新的看法。如果单纯从技术提高的角度来说，公共业务或者说基础建设确实有更快的技术成长。不过从绩效产出层面来说在业务线更容易保障下限，自己能够更主动一点那一般都能拿到不错的绩效。而纯技术岗位，很容易没有有价值的产出。不过既然我决定去，那也意味着我愿意接受这个挑战和可能的结果。
生活  年初买了车，有了车之后似乎没有特别大的感觉，但是在某些特别的时候你会不由感慨有车真好。
 篮球在下半年相对打得多一点，技术一度退步比较大。一直到十二月我才慢慢的找到了大学时候的感觉。女朋友的进步也非常大，我在某天带她打完球后，甚至觉得她现在有CUBA二级联赛的水平！
 六月到九月，坚持了三个月中午跑步和带餐上班，比较慢的瘦了八斤。那段时间现在回想起来还是比较快乐的，我从未想过我居然可以在跑步机上跑一个多小时。很遗憾，国庆后这个习惯就没了。
 九月中下旬去了三亚。因为毕业那年去过，所以在那待了四天，除了最后一天早上，其他时间我和她甚至没有去海边。庆幸最后一天早上五点多起来去看了日出，海边的日出真是太美了，每过几分钟景象还不一样。清晨海边天空的颜色和动漫里绘画出来的一模一样，红紫交错。此外，这次旅行我们俩一起自学游泳，取得了一些进步，两个人都可以游一段距离和站立了。来年游泳也会放在我的计划里。
 在三亚住的是香格里拉和亚特兰蒂斯。这两个之间我还是更喜欢香格里拉，香格里拉更像个度假的地方，整个酒店楼栋矮，安静悠闲，草和树很多，我们的房间对着海，早上拉开窗帘，阳光晃入后世界模糊在一片光亮之中，世界清晰后，近处的绿植和远处的海映入眼帘，扑面而来的是春暖花开。至于亚特兰蒂斯，我倒并没有所谓七星级酒店的逼格，它的大堂乱得像个菜市场。不过酒店房间是真的大，里面的用品也比较有品质。它自带的水世界还是值得玩耍的，就是人太多了。
 我去过两次三亚，总会在某些时候想写一下感受，但从未真正写下来。18年毕业时，我说三亚适合花半个月的时间住在这里，我以后还会来的。我现在依然这么认为，不过比起住在星级酒店，我更推荐住在靠海的民宿。我时常会想起那年凌晨一点多，我坐在阳台上看着楼下的马路在路灯下沿着海延伸，一侧是昏黄的路灯，一侧是看不清的海。安静的夜里虚虚实实，时间便过得很慢，此前从未想起的许多往事在脑袋里清晰起来，我真真切切的感受到了生活的味道和我在这世上的真实存在。</description></item><item><title>vue-router重复点击报错和新链接跳转失败</title><link>https://cocacolf.github.io/blog/vue-router-issues/</link><pubDate>Thu, 14 Jan 2021 00:00:00 +0000</pubDate><guid>https://cocacolf.github.io/blog/vue-router-issues/</guid><description>最近解决了项目的前端路由问题，具体而言有两个：
路由重复点击，会在控制台输出报错 一个 vue-router 渲染出来的 a 标签，右键新链接打开，在新页面无法打开网页 由于我们公司内外网隔离，所以无法具体截图现象。
路由重复点击，会在控制台输出报错 报错的大概内容为： vueAll.js?v=3.0:2 Uncaught (in promise) NavigationDuplicated: Avoided redundant navigation to current location: xxxx。
阅读 vue-router 的文档，可以看到：
router.push 或 router.replace 将返回一个 Promise
查看 vue-router 源码，从源码此处可以看出，我们对此方法进行异常处理，便可一劳永逸解决此问题。
因此在初始化路由时，对此方法进行处理：
import VueRouter from &amp;#39;vue-router&amp;#39;; function handleRouterErr (methodsList) { methodsList.forEach(item =&amp;gt; { const ORIGIN_METHOD = VueRouter.prototype[item]; VueRouter.prototype[item] = function (location) { let vm = this; return ORIGIN_METHOD.call(vm, location).catch(err =&amp;gt; err); } }); } // 调用 handleRouterErr([&amp;#39;push&amp;#39;, &amp;#39;replace&amp;#39;]) 无法在新标签页打开链接 右键一个 vue-router 渲染的 a 标签，新标签页打开后页面显示 Not Found。</description></item><item><title>简单版html模板引擎</title><link>https://cocacolf.github.io/blog/%E7%AE%80%E5%8D%95%E7%89%88html%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/</link><pubDate>Thu, 17 Oct 2019 00:00:00 +0000</pubDate><guid>https://cocacolf.github.io/blog/%E7%AE%80%E5%8D%95%E7%89%88html%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/</guid><description>背景 功能中包含一个历史申请记录的显示页面，简笔画简单画了一下，如下所示：
不知道多久没写过字了，画下来的东西着实丑，既然不能绘色，那就绘声一下。 每一条记录对应一个面板，每一个面板上呈现着对应记录的信息。那么不同的审批状态，就有很多东西不一样：
数据，这个没得说 内容的样式。比如审批成功用绿色标识，失败是红色 操作。比如审批中，那么就有一个撤销申请的按钮；其他的状态，就没有这个按钮，但是有一个面板折叠的按钮 面板左侧有状态条，反映当前的状态，同时也是时间线的作用 。。。 这个历史申请的数据是用XML格式传递的，如下所示：
&amp;lt;?xml version=\&amp;#34;1.0\&amp;#34; encoding=\&amp;#34;utf-8\&amp;#34;?&amp;gt; &amp;lt;Expansion&amp;gt; &amp;lt;Result&amp;gt;0&amp;lt;/Result&amp;gt; &amp;lt;ApplicationRecord&amp;gt; &amp;lt;record id=&amp;#34;1&amp;#34; status=&amp;#34;0&amp;#34; apply_cpu=&amp;#34;4&amp;#34; apply_mem=&amp;#34;8&amp;#34; apply_disk=&amp;#34;256&amp;#34; apply_time=&amp;#34;2019-10-14 20:00&amp;#34; approve_time=&amp;#34;2019-10-15 15:00&amp;#34; apply_reason=&amp;#34;卡得不能用了&amp;#34; approve_reason=&amp;#34;满足你&amp;#34; admin_name=&amp;#34;XXX&amp;#34; admin_phone=&amp;#34;2333333&amp;#34; admin_email=&amp;#34;test@gmail.com&amp;#34;/&amp;gt; &amp;lt;record id=&amp;#34;2&amp;#34; status=&amp;#34;2&amp;#34; apply_cpu=&amp;#34;4&amp;#34; apply_mem=&amp;#34;8&amp;#34; apply_disk=&amp;#34;256&amp;#34; apply_time=&amp;#34;2019-10-14 20:00&amp;#34; approve_time=&amp;#34;2019-10-15 15:00&amp;#34; apply_reason=&amp;#34;卡得不能用了&amp;#34; approve_reason=&amp;#34;那就继续卡着吧&amp;#34; admin_name=&amp;#34;XXX&amp;#34; admin_phone=&amp;#34;2333333&amp;#34; admin_email=&amp;#34;test@gmail.com&amp;#34;/&amp;gt; &amp;lt;/ApplicationRecord&amp;gt; &amp;lt;/Expansion&amp;gt; 所以很明显，要去遍历解析这个XML，去循环创建面板，再根据每条记录里对应的字段，写上正确的内容以及设置不同的样式。
由于某些原因，没有使用任何样式库或者框架，使用原生js编写。
以上是背景。
思路 当然这个需求没有难点，最一般的方法，当然就是html字符串拼接，在大量的 js if else逻辑里，将不同的数据和html片段拼接起来。其中一个片段可能是这样：
var data = {}; // 数据 var str = &amp;#39;&amp;#39;; // html拼接 if(data.</description></item><item><title>组内Node.js分享</title><link>https://cocacolf.github.io/blog/%E7%BB%84%E5%86%85node.js%E5%88%86%E4%BA%AB/</link><pubDate>Thu, 22 Aug 2019 00:00:00 +0000</pubDate><guid>https://cocacolf.github.io/blog/%E7%BB%84%E5%86%85node.js%E5%88%86%E4%BA%AB/</guid><description>昨天得知今天要进行小组分享，但是我内心并不慌张。关于今天的分享“当我在学习Node时，我在学什么”，是自己一路学习的心得体会，即便临场讲述也能言之有物。
聊什么  其实在两周前，我报名分享时，我打算自下而上来分享Node，从底层架构到上层应用，但后来我可以很明显的预知到这样分享的效果会不好。所以我改变了分享的内容，同时由于时间原因，这次分享侧重点并不是在讲述Node是什么，以及Node Api相关的东西，我也相信以大家的自学能力，入门并不是问题。我今天分享的是个人在初期学习Node的过程中的经历、感受。
说说历史  我喜欢听故事也喜欢讲故事，所以我还是想从最开始说起。那是2009年，Ryan Dahl想写一个基于事件驱动和非阻塞IO的高性能服务器，他尝试了许多语言来构建，比如C、Lua、Haskell等，但由于自己hold不住或语言本身已存在这些东西，他最后瞄向了没有历史包袱的Javascript，从而创建了Node。但要注意的是，Node并不是一门语言，只是一个Javascript的运行时，可以理解为PythonVM之于Python，JVM之于Java。
特点  异步IO和基于事件和回调函数。比如在Node中使用文件模块读取文件:
fs.readFile(&amp;#39;./1.txt&amp;#39;, (err, data) =&amp;gt; { console.log(data); }); fs.readFile(&amp;#39;./2.txt&amp;#39;, (err, data) =&amp;gt; { console.log(data); }); 对于这种风格显然我们不陌生，比如：
oneDom.addEventListener(&amp;#39;click&amp;#39;, function() { // do something }); $.get(&amp;#39;/url&amp;#39;, function(data) =&amp;gt; { // do something }) 这种异步IO，带来的好处就是性能更快，它的耗时取决于最慢的操作，但是也带来了成本，一是异步风格带来的理解成本，因为编码顺序和执行顺序并不一致；二是错误的处理。
另外，我们可以看到代码风格是基于事件和回调函数风格，再举一个例子，使用原生http模块来接收post数据时：
let str = &amp;#39;&amp;#39;; req.on(&amp;#39;data&amp;#39;, (trunk) =&amp;gt; { str += trunk; }); req.on(&amp;#39;end&amp;#39;, () =&amp;gt; { res.end(str); }); 这种基于事件的回调风格可以有一些优点，也是我个人最喜欢Node的地方，Don't Call Me, I Wll Call You。这种风格可以带来轻解耦，我们只需要关注事务即可。但是也有一些不足，比如每个事件事务相对独立，如果事件之间要彼此协作就不太方便。</description></item><item><title>进行了一次肠镜检查</title><link>https://cocacolf.github.io/blog/%E8%BF%9B%E8%A1%8C%E4%BA%86%E4%B8%80%E6%AC%A1%E8%82%A0%E9%95%9C%E6%A3%80%E6%9F%A5/</link><pubDate>Mon, 27 May 2019 00:00:00 +0000</pubDate><guid>https://cocacolf.github.io/blog/%E8%BF%9B%E8%A1%8C%E4%BA%86%E4%B8%80%E6%AC%A1%E8%82%A0%E9%95%9C%E6%A3%80%E6%9F%A5/</guid><description> 之前腹部隐痛，加上大便习惯改变，所以去看了医生。医生开了半个月的治疗肠炎的药，大便有所改善，但是腹部隐疼问题依然还在，于是再次去了医院，医生建议肠镜，于是进行了预约。时隔十来天，今天下午进行了检查。
 首先要表示的是，一定要健康饮食，包括食物健康（不要重油等）和吃饭习惯良好（细嚼小口），因为肠镜体验实在是不好。不过尽管过程不好过，但是这个检查是很有必要的，美国医学界建议人到了50岁就要筛查有没有结肠癌，一般是5到10年做一次结肠镜检查，这个费用是免费的（国内，比如我是花了八百块）。
 肠镜进行的前一天和当天，要进行清肠，具体是三点：吃流食、吃泻药、禁食禁饮。前一天要尽量是流食，我选择的是粥。我是不爱喝粥的，但是却足足喝了三顿粥，饿得特别快，而且总感觉没味道，好想吃好吃的，要不是女朋友监督着我，我感觉分分钟忍不住。晚上九点的样子，要开始服用泻药，这种泻药的效果和自己平时感冒等腹泻不一样，它会补充电解质，让你不会脱水严重，让人虚弱。一盒药分为6包A剂和6包B剂，用1000毫升水泡在一个大杯子里，三十分钟喝完！虽然这个药泡水后的味道感觉就是盐水，不难喝，但是在半个小时里往自己体内灌一升水，简直是太难受了，我大口大口的喝，中间好几次都想吐。这里有一点，杯子上特别提示说喝的过程中要来回走动，否则会严重影响清肠效果，我可能是没有严格遵守这一点，导致第一晚我居然没一点事，厕所都没有上。第二天到了，也就是检查当天，当天早午餐是禁食的，大概在上午九点开始喝泻药，这次更猛，两盒也就是24包一共两升水在40分钟喝完！我做个键盘侠&amp;hellip;为了效果建议还是忍着喝完，因为我就没有喝完，只喝了一升。这次我就注意了走动，喝完后去小区里走了几圈，然后感觉要来了，速度回家&amp;hellip;省略八百字。之后在十一点，喝一种XX油的药，作用是消除消化道里的气泡。这个药量少，也不难喝。然后十二点后禁饮，开始去医院。
 肠镜是一个大房间里很多人一起做，但是隐私保护还是有的。进去后侧躺在床上，褪下裤子献上自己的菊花。我选择的是无痛肠镜，会使用麻醉，这里有个有意思的事。给我打药的护士给我鼻子插上氧气，把针筒插到我手上，轻轻推了一下，我以为我会马上麻醉，然而好像只有扎针的这只手好像有点乏力，没有别的感觉，意识无比清醒，甚至觉得有趣。于是我便和护士说，这麻药对我没啥用啊，护士看了我一眼，大拇指动了动，我看着她一点一点的挪动着大拇指，眼睛开始模糊，意识却还是想说点什么，刚准备开口，就睡着了。不知道过了多久，醒了，躺在床上，裤子被穿起来了，很粗暴的只穿好了外裤，里面的内裤还是褪下的，于是我想提一下内裤，然而使用不上力气。就像是早上睁眼还想睡一样，又睡着了。这次应该没有多久，便醒了，医生扶我到了外面沙发上坐着等结果，我想去找女朋友告诉她我做完了，就像个醉汉东摇西撞。不知道普通肠镜不适感是怎么样，无痛肠镜是全程无感的，就是醒来后感觉屁股有点不舒服，毕竟作为一个直男，屁股被捅了怎么都会感觉不舒服；另外就是肚子里感觉很胀，很想排气，这是因为在检查过程中医生为了更仔细检查，会打气把肠道鼓起来。
 结果很快出来了，没有什么问题，长舒一口气。之前还在网上查了好多肠癌啥的乱七八糟，真是吓自己。
 检查之前，我在女友那立了个flag，我说这次要是健康的话，以后重新做人：
少吃重油的东西，饮食要比以前更清淡一点（我以前特别喜欢菜的油拌饭）
吃饭不要吃太快，细嚼慢咽
八成饱就好（我遇到好吃的 / 舍不得浪费时好多时候都可能十二分饱）
蔬菜水果</description></item><item><title>Node.js Event Loop</title><link>https://cocacolf.github.io/blog/node.js-event-loop/</link><pubDate>Sun, 28 Apr 2019 00:00:00 +0000</pubDate><guid>https://cocacolf.github.io/blog/node.js-event-loop/</guid><description>第一次接触Node的时候就喜欢上它了，但是那时候学习它的时候，一直感觉入不了门，会写一点但总感觉隔了层膜，挺难受的，后来的渐渐有所感觉是在简单的了解了事件驱动后。再后来就觉得JS层面的Node其实没有太多的东西，于是开始想要去了解下层一点的东西。最近看了一篇非常好的博文，在这里做几点记录。
什么是事件循环 event Demultiplexer来处理事件分发，同时把IO操作委托给硬件。它是一种抽象，各操作系统有自己的实现(Linux -&amp;gt; epoll,MacOS -&amp;gt; kqueue,Windows -&amp;gt; IOCP)。为了支持不同的操作系统中不同的IO操作，于是诞生了libuv。
当IO操作被处理时，相对应的回调函数就被加入事件队列
事件队列执行并清空事件队列
循环上述过程
事件队列 简化的事件循环的执行阶段顺序
 这里有几个要点:
有两个中间过渡检查: process.nextTick 和 process.resolve，且前者优先级大于后者
next tick 队列始终不为空导致IO饿死的问题
Timers并不一定会准确执行，与CPU性能和当前所处的事件阶段有关
两个很经典的例子
// 执行顺序不能保证 setTimeout(function() { console.log(&amp;#39;setTimeout&amp;#39;); }, 0); setImmediate(function() { console.log(&amp;#39;setImmediate&amp;#39;); }); // setImmediate 一定在 setTimeout 之前执行 const fs = require(&amp;#39;fs&amp;#39;); fs.readFile(__filename, () =&amp;gt; { setTimeout(() =&amp;gt; { console.</description></item><item><title>什么才算是真正的编程能力</title><link>https://cocacolf.github.io/blog/%E4%BB%80%E4%B9%88%E6%98%AF%E7%9C%9F%E6%AD%A3%E7%9A%84%E7%BC%96%E7%A8%8B%E8%83%BD%E5%8A%9B/</link><pubDate>Sun, 05 Feb 2017 00:00:00 +0000</pubDate><guid>https://cocacolf.github.io/blog/%E4%BB%80%E4%B9%88%E6%98%AF%E7%9C%9F%E6%AD%A3%E7%9A%84%E7%BC%96%E7%A8%8B%E8%83%BD%E5%8A%9B/</guid><description>转自这里
 非常好的一个问题。这可能是我在知乎见到过的问编程有关的问题中问得最好的一个了。我非常喜欢这个问题。
 计算机科学有两类根本问题。一类是理论：算法，数据结构，复杂度，机器学习，模式识别，等等等。一类是系统：操作系统，网络系统，分布式系统，存储系统，游戏引擎，等等等等。
 理论走的是深度，是在追问在给定的计算能力约束下如何把一个问题解决得更快更好。而系统走的是广度，是在追问对于一个现实的需求如何在众多的技术中设计出最多快好省的技术组合。
 搞ACM的人，只练第一类。像你这样的更偏向于第二类。其实挺难得的，但很可惜的是第二类能力没有简单高效的测量考察方法，不像算法和数据结构有ACM竞赛，所以很多系统的苗子都因为缺少激励和正确引导慢慢就消隐了。
 所以比尔盖茨才会说，看到现在学编程的人经常都把编程看作解各种脑筋急转弯的问题，他觉得很遗憾。
 做系统，确实不提倡“重复发明轮子”。但注意，是不提倡“重复发明”，不是不提倡“重新制造”。恰恰相反的，我以为，系统的编程能力正体现在“重新制造”的能力。
 能把已有的部件接起来，这很好。但当你恰好缺一种关键的胶水的时候，你能写出来吗？当一个已有的部件不完全符合你的需求的时候，你能改进它吗？如果你用的部件中有bug，你能把它修好吗？在网上繁多的类似功能的部件中，谁好谁坏？为什么？差别本质吗？一个开源代码库，你能把它从一个语言翻译到另一个语言吗？从一个平台移植到另一个平台吗？能准确估计自己翻译和移植的过程需要多少时间吗？能准确估计翻译和移植之后性能是会有提升还是会有所下降吗？
 系统编程能力体现在把已有的代码拿来并变成更好的代码，体现在把没用的代码拿来并变成有用的代码，体现在把一个做好的轮子拿来能画出来轮子的设计蓝图，并用道理解释出设计蓝图中哪些地方是关键的，哪些地方是次要的，哪些地方是不容触碰的，哪些地方是还可以改进的。
 如果你一点不懂理论，还是应该学点的。对于系统性能的设计上，算法和数据结构就像在自己手头的钱一样，它们不是万能的，但不懂是万万不行的。
 怎么提高系统编程能力呢？土办法：多造轮子。就像学画画要画鸡蛋一样，不是这世界上没有人会画鸡蛋，但画鸡蛋能驯服手指，感受阴影线条和笔触。所以，自己多写点东西吧。写个编译器？渲染器？操作系统？web服务器？web浏览器？部件都一个个换成自己手写的，然后和已有的现成部件比一比，看看谁的性能好，谁的易用性好？好在哪儿？差在哪儿？为什么？
 更聪明一点的办法：多拆轮子。多研究别人的代码是怎么写的。然而这个实践起来经常很难。原因：大部分工业上用的轮子可能设计上的思想和技术是好的，都设计和制造过程都很烂，里面乱成一团，让人乍一看毫无头绪，导致其对新手来说非常难拆。这种状况其实非常糟糕。所以，此办法一般只对比较简单的轮子好使，对于复杂的轮子，请量力而行。
 轮子不好拆，其实是一个非常严重的问题。重复发明轮子固然是时间的浪费，但当轮子复杂而又不好拆的时候，尤其是原来造轮子的人已经不在场的时候，重新发明和建造轮子往往会成为无奈之下最好的选择。这是为什么工业界在明知道重复发明/制造轮子非常不好的情况下还在不断重复发明/制造轮子的根本原因。 程序本质是逻辑演绎的形式化表达，记载的是人类对这个世界的数字化理解。不能拆的轮子就像那一篇篇丢了曲谱的宋词一样，能读，却不能唱。
 鄙人不才，正在自己研究怎么设计建造一种既好用又好拆的轮子。您没那么幸运，恐怕是等不到鄙人的技术做出来并发扬光大了。在那之前，多造轮子，多拆好拆的小轮子，应该是提高编程能力最好的办法了。
 以上。嗯。 （文章属个人观点，与本人工作雇主无关。）</description></item><item><title>过期的凤梨罐头</title><link>https://cocacolf.github.io/blog/%E8%BF%87%E6%9C%9F%E7%9A%84%E5%87%A4%E6%A2%A8%E7%BD%90%E5%A4%B4/</link><pubDate>Fri, 02 Sep 2016 00:00:00 +0000</pubDate><guid>https://cocacolf.github.io/blog/%E8%BF%87%E6%9C%9F%E7%9A%84%E5%87%A4%E6%A2%A8%E7%BD%90%E5%A4%B4/</guid><description>有年双十一我在微博上看到一个好看的女生，顺便就保存了她的照片。回去的路上我遇到和女朋友约会的兄弟，我向他挥了挥手。
 我把QQ打开，把照片上传到了照片墙上，她的笑在我照片墙上像朵花，我觉得效果就像开了QQ会员。
 我在房间里百无聊赖的逛着虎扑，但我发了条朋友圈，配图是那个女生，但其实照片是我偷的，我不认识这个人。
 我的兄弟给我发来了消息，我吃惊他在这个夜晚居然有空理我。他问我怎么有女朋友了也不和他说，女朋友还那么好看。
 我应该告诉他的，但今天是双十一，我说不是是不是有点凄惨。所以我说是，她是我女朋友。
 他发了个滑稽的表情，我没有再回复他。我想这个表情有好多意思，我想他接下来的今晚很忙。
 但其实照片是我偷的，我不认识这个人。我又百无聊赖的逛了下虎扑，我心里慌得很，于是我把那条朋友圈删了。我刷新了一遍消息列表，没有收到晚安的消息。我换上了自己喜欢的睡衣，倒在熬不住的夜里。
 后来在路上遇上了另一个朋友，他就问我，你交女朋友了啊？我想应该是我兄弟告诉了别人，我交了一个女朋友，也许他还补充了一句，我女朋友还很漂亮。
 我该如何回复呢？我只能继续说是，我不能告诉他们照片是我偷的，我不认识这么一个人。
 因此我想我接下来要计划一下日子了，我不能再经常宅在家里了，因为很多人都知道了，我有个漂亮的女朋友。
 我每晚在外面晃到很晚，他们遇到晚归的我，“呦，x兄送完女朋友回来了啊”。
 以前我很少去电影院看电影，但我现在经常去看电影，我买两张票，我吃两份爆米花，因为他们都说，我有个女朋友。可我的旁边明明就空着一张座位，可是我的爆米花明明就吃不完。所以我总是浪费了一张票，我总是挺着饱胀的肚子出影院。
 也有些时候他们在很早的时候就在街上遇到我，就很奇怪的问我你女朋友怎么没和你一起？他们低头看了看我空空的两手，满脸关心的教导我应该要给女朋友买点东西的，别舍不得那些钱，女孩子是拿来疼的。我怔怔的点点头，笑着说待会儿买，边说边指着后面的商场，她上厕所去了。
 所以我后来上街就会买一些女生的东西，有些款式还真挺好看，我甚至想选个中性的颜色买给自己。我想，这样的话他们会以为这是我买给自己的吧，于是我总是买粉色。
 一个晚上我在想，他们如果要聚会，大家都会带上女朋友的时候，我该怎么办？我告诉他们照片是我偷的，我不认识这么一个人？我觉得我会被嘲笑到脸比猴子屁股还要红。于是我出去旅游了，当然是带上我的女朋友一起。
 我把美景发到了朋友圈，很多人都给我点赞，也有很多人评论我别光晒景。
 我说我拍照技术不好，那些图拍出来把她拍丑了，不让发。
 我想这时候女性朋友看到我的回复估计笑开了花，挽着男朋友的胳膊，摸着男朋友的手，感叹有个会拍照的男友好幸福。我想男性朋友看到是一副我不行而他好能干的神色。
 好久好久都没人知道，我不认识这么一个人，照片是我偷的。
 有一天我兄弟叫我去打球，打完后又请我去吃烧烤。这孙子平日很抠门，我在想他是不是今天买了国足赢球而中了大奖。
 他莫名其妙的和我说着分手没什么大不了之类的话，还夸我这种有才华的男生能找到更好的人。
 我才知道那天他借我手机打电话的时候看我相册了，发现我手机里把女朋友的照片全删光了。
 我的天，原来我就分手了啊。
 可我竟然一点也不伤心甚至想笑，如果我知道会是这样的话，我早就应该把手机给他们看。还好电影票在淘宝买的不太贵，还好出去旅游我也获得了精神自由。而此时此刻，我面前摆着的烧烤更香了，我都开始吧唧吧唧嘴来。兄弟问我怎么都不难受，我摆了摆手洒脱的说人要看得开，要学会放手。
 我又没女友了，一切又回到最初的起点。后来我真的遇到了一个女孩子，我一直都觉得我们会好很久，但她说我这人实在是够无趣，委婉的和我说了拜拜。
 我的心里空落落的，也在这个时候我喜欢上了听周杰伦，我喜欢那首明明就，“远方传来风笛，我却在意有你的消息”。我也开始成了诗人，我写了很多情诗，但我没有发出来，南风知我意，吹梦到西洲。那段日子好沉闷好孤独。
 于是我想起了我和前女友的那段日子，我看电影，我吃爆米花，我逛街，我旅游，多么丰富啊！可是我才记起来，我明明就没有前女友啊。
 照片是我偷的，我不认识这么一个人。
 又到了一年双十一，我没有出门，但我知道我的兄弟出去约会了，对象已经不是去年那个姑娘了，而我还是一个人百无聊赖的逛虎扑。
 我卸载了微博，鬼知道去年我干嘛把一个我不认识的女孩发到我的朋友圈。
 今年入冬感觉比较早啊，我穿着牛仔外套感觉很冷。我看完了虎扑的帖子，我便去刷新了消息列表，没有收到晚安，但时间告诉我我该睡了。
 我不知道为什么，我突然想发一条朋友圈。图片还是配上了去年那个女孩。
 正准备睡觉的时候我的手机突然亮了，是一个最近走得比较近的女孩。
 “那是你女朋友吗？”
 “不，照片是我偷的，我不认识这么一个人。晚安。”</description></item><item><title>有趣的姑娘真美</title><link>https://cocacolf.github.io/blog/%E6%9C%89%E8%B6%A3%E7%9A%84%E5%A7%91%E5%A8%98%E7%9C%9F%E7%BE%8E/</link><pubDate>Fri, 20 May 2016 00:00:00 +0000</pubDate><guid>https://cocacolf.github.io/blog/%E6%9C%89%E8%B6%A3%E7%9A%84%E5%A7%91%E5%A8%98%E7%9C%9F%E7%BE%8E/</guid><description> 从周二下午开始就没去上过课了，周二下午打球把膝盖摔伤了，第二天膝盖肿得难以行走，去了市医院检查，医生要我先回来观察，倘若两天后情况不好的话再去去做进一步检查甚至需要手术，他提到了半月板这个词，我当时着实被吓到了，这可是我只会在NBA球员身上听到的伤病啊。回来的路上，我心里是很忐忑的，更多的是害怕，怕再也打不了球了，望着车窗外转瞬即逝的风景，我很沮丧。吃了一天的云南白药，热敷了一天，第二天醒来的很早，下意识的抬了抬膝盖，发现能抬腿了，我心里的石头落地了。到现在已经可以行走了，只是会疼，安心休息，两周后伤好后再去球场干一场。
 昨晚一个人在宿舍，把灯都关了，只留下橘色的台灯的光，我在这静默中听着歌。室友去俱乐部听千瓦演唱会了，忽然手机震动了，他给我录了现场的开场曲，是灌篮高手的主题曲，那旋律听了就想战斗。刚刚听完，却收到了小芳姑娘的消息，同样是一段语音，我很讶异。小芳姑娘是机械院的，工设专业，我和她从没见过面，是从一个群里加的好友，最初就是因为灌篮高手而聊起来的，她是个很喜欢灌篮高手的女生。和她就只有过那次的聊天，之后记忆里没有了。所以在收到语音的时候我讶异。点开语音，原来也是开场曲，我不自觉的笑了，这姑娘真是用心，还记得她列表里躺着一个和她一样喜欢着灌篮高手的男孩儿啊。她说她听到这首歌的时候克制着自己，不然就蹦起来了，我想象了一下那种感觉，我觉得像只兔子。和她聊了几句，我想还是不聊了吧，她还是好好听晚会吧，唱歌的晚会这种活动我觉得是要连贯的去投入才嗨。一个半小时后，我听到了雨拍打窗户的声音，随即声音越来越大，我起身走到窗前看了看外面，我还是给小芳姑娘发了消息：外面下着很大的雨，晚会结束回去注意点&amp;hellip;不多时她便回复我了，我这人其实话不多，但只要我想说了，话就会多起来而且往往还会有趣，而恰好小芳姑娘是个很有趣的姑娘，趣味相投。而进一步认识后，她不仅有趣，还热爱着跑步，已经是一种习惯，这让我觉得很厉害，能坚持跑步这是一件不容易的事，而且能改变一个人的气质。
 我慢慢的觉得这姑娘很善良很有趣，我开始觉得有趣的姑娘好美，哪怕我没见过她，我想象中便会有一个很美但模糊的轮廓。我想气自华就是这种感觉吧，姑娘就是要这般明媚。对于我以后的女朋友，我也希望她是这般明媚，在她的明媚被乌云遮盖时我给她拨开乌云重见日，而她一直会是我的小太阳。
 对了，小芳姑娘叫李芳，给这个有趣的姑娘写句诗吧：庭前桃李满，院外小径芳。
2016.12.9这位姑娘成为了我女朋友。</description></item></channel></rss>