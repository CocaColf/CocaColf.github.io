<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>庭前桃李满，院外小径芳</title><link>http://CocaColf.github.io/</link><description>Recent content on 庭前桃李满，院外小径芳</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>CocaColf</copyright><lastBuildDate>Mon, 27 May 2019 00:00:00 +0000</lastBuildDate><atom:link href="http://CocaColf.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>About</title><link>http://CocaColf.github.io/about/</link><pubDate>Mon, 16 Nov 2020 19:09:25 +0800</pubDate><guid>http://CocaColf.github.io/about/</guid><description>&lt;p>// TODO&lt;/p></description></item><item><title>进行了一次肠镜检查</title><link>http://CocaColf.github.io/post/%E8%BF%9B%E8%A1%8C%E4%BA%86%E4%B8%80%E6%AC%A1%E8%82%A0%E9%95%9C%E6%A3%80%E6%9F%A5/</link><pubDate>Mon, 27 May 2019 00:00:00 +0000</pubDate><guid>http://CocaColf.github.io/post/%E8%BF%9B%E8%A1%8C%E4%BA%86%E4%B8%80%E6%AC%A1%E8%82%A0%E9%95%9C%E6%A3%80%E6%9F%A5/</guid><description>&lt;p>    之前腹部隐痛，加上大便习惯改变，所以去看了医生。医生开了半个月的治疗肠炎的药，大便有所改善，但是腹部隐疼问题依然还在，于是再次去了医院，医生建议肠镜，于是进行了预约。时隔十来天，今天下午进行了检查。&lt;/p>
&lt;p>    首先要表示的是，一定要健康饮食，包括食物健康（不要重油等）和吃饭习惯良好（细嚼小口），因为&lt;code>肠镜体验实在是不好&lt;/code>。不过尽管过程不好过，但是这个检查是很有必要的，美国医学界建议人到了50岁就要筛查有没有结肠癌，一般是5到10年做一次结肠镜检查，这个费用是免费的（国内，比如我是花了八百块）。&lt;/p>
&lt;p>    肠镜进行的前一天和当天，要进行清肠，具体是三点：吃流食、吃泻药、禁食禁饮。前一天要尽量是流食，我选择的是粥。我是不爱喝粥的，但是却足足喝了三顿粥，饿得特别快，而且总感觉没味道，好想吃好吃的，要不是女朋友监督着我，我感觉分分钟忍不住。晚上九点的样子，要开始服用泻药，这种泻药的效果和自己平时感冒等腹泻不一样，它会补充电解质，让你不会脱水严重，让人虚弱。一盒药分为6包A剂和6包B剂，用1000毫升水泡在一个大杯子里，三十分钟喝完！虽然这个药泡水后的味道感觉就是盐水，不难喝，但是在半个小时里往自己体内灌一升水，简直是太难受了，我大口大口的喝，中间好几次都想吐。这里有一点，杯子上特别提示说喝的过程中要来回走动，否则会严重影响清肠效果，我可能是没有严格遵守这一点，导致第一晚我居然没一点事，厕所都没有上。第二天到了，也就是检查当天，当天早午餐是禁食的，大概在上午九点开始喝泻药，这次更猛，两盒也就是24包一共两升水在40分钟喝完！我做个键盘侠&amp;hellip;为了效果建议还是忍着喝完，因为我就没有喝完，只喝了一升。这次我就注意了走动，喝完后去小区里走了几圈，然后感觉要来了，速度回家&amp;hellip;省略八百字。之后在十一点，喝一种XX油的药，作用是消除消化道里的气泡。这个药量少，也不难喝。然后十二点后禁饮，开始去医院。&lt;/p>
&lt;p>    肠镜是一个大房间里很多人一起做，但是隐私保护还是有的。进去后侧躺在床上，褪下裤子献上自己的菊花。我选择的是无痛肠镜，会使用麻醉，这里有个有意思的事。给我打药的护士给我鼻子插上氧气，把针筒插到我手上，轻轻推了一下，我以为我会马上麻醉，然而好像只有扎针的这只手好像有点乏力，没有别的感觉，意识无比清醒，甚至觉得有趣。于是我便和护士说，这麻药对我没啥用啊，护士看了我一眼，大拇指动了动，我看着她一点一点的挪动着大拇指，眼睛开始模糊，意识却还是想说点什么，刚准备开口，就睡着了。不知道过了多久，醒了，躺在床上，裤子被穿起来了，很粗暴的只穿好了外裤，里面的内裤还是褪下的，于是我想提一下内裤，然而使用不上力气。就像是早上睁眼还想睡一样，又睡着了。这次应该没有多久，便醒了，医生扶我到了外面沙发上坐着等结果，我想去找女朋友告诉她我做完了，就像个醉汉东摇西撞。不知道普通肠镜不适感是怎么样，无痛肠镜是全程无感的，就是醒来后感觉屁股有点不舒服，毕竟作为一个直男，屁股被捅了怎么都会感觉不舒服；另外就是肚子里感觉很胀，很想排气，这是因为在检查过程中医生为了更仔细检查，会打气把肠道鼓起来。&lt;/p>
&lt;p>    结果很快出来了，没有什么问题，长舒一口气。之前还在网上查了好多肠癌啥的乱七八糟，真是吓自己。&lt;/p>
&lt;p>    检查之前，我在女友那立了个flag，我说这次要是健康的话，以后重新做人：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>少吃重油的东西，饮食要比以前更清淡一点（我以前特别喜欢菜的油拌饭）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>吃饭不要吃太快，细嚼慢咽&lt;/p>
&lt;/li>
&lt;li>
&lt;p>八成饱就好（我遇到好吃的 / 舍不得浪费时好多时候都可能十二分饱）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>蔬菜水果&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>Node.js Event Loop</title><link>http://CocaColf.github.io/post/node.js-event-loop/</link><pubDate>Sun, 28 Apr 2019 00:00:00 +0000</pubDate><guid>http://CocaColf.github.io/post/node.js-event-loop/</guid><description>&lt;p>    第一次接触Node的时候就喜欢上它了，但是那时候学习它的时候，一直感觉入不了门，会写一点但总感觉隔了层膜，挺难受的，后来的渐渐有所感觉是在简单的了解了事件驱动后。再后来就觉得JS层面的Node其实没有太多的东西，于是开始想要去了解下层一点的东西。最近看了一篇非常好的&lt;a href="https://github.com/zhangxiang958/zhangxiang958.github.io/issues/43">博文&lt;/a>，在这里做几点记录。&lt;/p>
&lt;h2 id="什么是事件循环">什么是事件循环&lt;/h2>
&lt;p>&lt;img src="https://camo.githubusercontent.com/dd28ae6f0212f319720e8f712d8db15ff8feffc6/687474703a2f2f696d672e696a61727669732e636e2f76322d36363934636163633138343964386336313438333831616161643165616637375f68642e6a7067" alt="事件轮询">&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>event Demultiplexer&lt;/code>来处理事件分发，同时把IO操作委托给硬件。它是一种抽象，各操作系统有自己的实现(Linux -&amp;gt; epoll,MacOS -&amp;gt; kqueue,Windows -&amp;gt; IOCP)。为了支持不同的操作系统中不同的IO操作，于是诞生了libuv。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>当IO操作被处理时，相对应的回调函数就被加入事件队列&lt;/p>
&lt;/li>
&lt;li>
&lt;p>事件队列执行并清空事件队列&lt;/p>
&lt;/li>
&lt;li>
&lt;p>循环上述过程&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="事件队列">事件队列&lt;/h2>
&lt;p>&lt;strong>简化的事件循环的执行阶段顺序&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://camo.githubusercontent.com/d94dd80a874eca894c6b9fb7e7ef643f84977835/687474703a2f2f696d672e696a61727669732e636e2f76322d34386333386431663231663438306462363131643962303138323864303762615f722e6a7067" alt="事件队列的执行顺序">&lt;/p>
&lt;p>    这里有几个要点:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>有两个中间过渡检查: &lt;code>process.nextTick&lt;/code> 和 &lt;code>process.resolve&lt;/code>，且前者优先级大于后者&lt;/p>
&lt;/li>
&lt;li>
&lt;p>next tick 队列始终不为空导致IO饿死的问题&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Timers&lt;/code>并不一定会准确执行，与CPU性能和当前所处的事件阶段有关&lt;/p>
&lt;/li>
&lt;li>
&lt;p>两个很经典的例子&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="c1">// 执行顺序不能保证
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">setTimeout&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">function&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;setTimeout&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">},&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">setImmediate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">function&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;setImmediate&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="c1">// setImmediate 一定在 setTimeout 之前执行
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">fs&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;fs&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">fs&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">readFile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">__filename&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">setTimeout&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;timeout&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">},&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">setImmediate&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;immediate&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>事件循环的阶段&lt;/strong>&lt;/p>
&lt;p>当Node.js启动时会初始化event loop, 每一个event loop都会包含按如下顺序循环阶段：&lt;/p>
&lt;p>&lt;img src="https://user-gold-cdn.xitu.io/2018/8/2/164f6645917f6cce?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="事件循环阶段">&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Timer ——到期的定时器回调和 interval 回调。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Pending IO Callback——处理被挂起的 I/O 事件，包括完成的和失败的。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Idle —— 执行一些 libuv 内部操作。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Prepare —— 执行一些 I/O 操作的预准备工作。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Poll —— &lt;code>可选择性地&lt;/code>等待 I/O 操作完成，&lt;code>这里可能会发生Node阻塞&lt;/code>。在node.js里，任何异步方法（除timer,close,setImmediate之外）完成时，都会将其callback加到poll queue里,并立即执行。所以Poll阶段：&lt;code>1.处理poll队列（poll quenue）的事件(callback); 2.当到达timers指定的时间时,执行timers的callback;&lt;/code>
这里引用博客上的一段解释:&lt;/p>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>如果event loop进入了 poll阶段，且代码未设定timer，将会发生下面情况：&lt;/p>
&lt;ul>
&lt;li>如果poll queue不为空，event loop将同步的执行queue里的callback,直至queue为空，或执行的callback到达系统上限;&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;blockquote>
&lt;p>如果poll queue为空，将会发生下面情况：&lt;/p>
&lt;ul>
&lt;li>如果代码已经被setImmediate()设定了callback, event loop将结束poll阶段进入check阶段，并执行check阶段的queue (check阶段的queue是 setImmediate设定的)&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;blockquote>
&lt;p>如果代码没有设定setImmediate(callback)，event loop将阻塞在该阶段等待callbacks加入poll queue;&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>如果event loop进入了 poll阶段，且代码设定了timer：&lt;/p>
&lt;ul>
&lt;li>如果poll queue进入空状态时（即poll 阶段为空闲状态），event loop将检查timers,如果有1个或多个timers时间时间已经到达，event loop将按循环顺序进入 timers 阶段，并执行timer queue.&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;pre>&lt;code>关于这里，我觉得 cNode上这个 [帖子](https://cnodejs.org/topic/57d68794cb6f605d360105bf) 的讨论非常精彩。
&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>
&lt;p>Check handlers —— 执行一些 I/O 操作的后续处理工作，通常来说，setImmediate 添加的回调也会在这个阶段执行。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Close handlers —— 执行一些 close 事件相关的操作比如 socket 连接等等。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>此外，process.nextTick()不在event loop的任何阶段执行，而是在各个阶段切换的中间执行
&lt;strong>事件轮询的核心代码&lt;/strong>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="c1">//deps/uv/src/unix/core.c
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">uv_run&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">uv_loop_t&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">loop&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">uv_run_mode&lt;/span> &lt;span class="n">mode&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">timeout&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">r&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">ran_pending&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">//uv__loop_alive返回的是event loop中是否还有待处理的handle或者request
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//以及closing_handles是否为NULL,如果均没有,则返回0
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">r&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">uv__loop_alive&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">loop&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">//更新当前event loop的时间戳,单位是ms
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">uv__update_time&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">loop&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">r&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">loop&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">stop_flag&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">//使用Linux下的高精度Timer hrtime更新loop-&amp;gt;time,即event loop的时间戳
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">uv__update_time&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">loop&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">//执行判断当前loop-&amp;gt;time下有无到期的Timer,显然在同一个loop里面timer拥有最高的优先级
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">uv__run_timers&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">loop&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">//判断当前的pending_queue是否有事件待处理,并且一次将&amp;amp;loop-&amp;gt;pending_queue中的uv__io_t对应的cb全部拿出来执行
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">ran_pending&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">uv__run_pending&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">loop&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">//实现在loop-watcher.c文件中,一次将&amp;amp;loop-&amp;gt;idle_handles中的idle_cd全部执行完毕(如果存在的话)
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">uv__run_idle&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">loop&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">//实现在loop-watcher.c文件中,一次将&amp;amp;loop-&amp;gt;prepare_handles中的prepare_cb全部执行完毕(如果存在的话)
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">uv__run_prepare&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">loop&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">timeout&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">//如果是UV_RUN_ONCE的模式,并且pending_queue队列为空,或者采用UV_RUN_DEFAULT(在一个loop中处理所有事件),则将timeout参数置为
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//最近的一个定时器的超时时间,防止在uv_io_poll中阻塞住无法进入超时的timer中
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="n">mode&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">UV_RUN_ONCE&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="n">ran_pending&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="n">mode&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">UV_RUN_DEFAULT&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">timeout&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">uv_backend_timeout&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">loop&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">//进入I/O处理的函数(重点分析的部分),此处挂载timeout是为了防止在uv_io_poll中陷入阻塞无法执行timers;并且对于mode为
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//UV_RUN_NOWAIT类型的uv_run执行,timeout为0可以保证其立即跳出uv__io_poll,达到了非阻塞调用的效果
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">uv__io_poll&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">loop&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">timeout&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">//实现在loop-watcher.c文件中,一次将&amp;amp;loop-&amp;gt;check_handles中的check_cb全部执行完毕(如果存在的话)
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">uv__run_check&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">loop&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">//执行结束时的资源释放,loop-&amp;gt;closing_handles指针指向NULL
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">uv__run_closing_handles&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">loop&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">mode&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">UV_RUN_ONCE&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">//如果是UV_RUN_ONCE模式,继续更新当前event loop的时间戳
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">uv__update_time&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">loop&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">//执行timers,判断是否有已经到期的timer
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">uv__run_timers&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">loop&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">r&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">uv__loop_alive&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">loop&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">//在UV_RUN_ONCE和UV_RUN_NOWAIT模式中,跳出当前的循环
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">mode&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">UV_RUN_ONCE&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="n">mode&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">UV_RUN_NOWAIT&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">//标记当前的stop_flag为0,表示当前的loop执行完毕
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">loop&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">stop_flag&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">loop&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">stop_flag&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">//返回r的值
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">r&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>什么才算是真正的编程能力</title><link>http://CocaColf.github.io/post/%E4%BB%80%E4%B9%88%E6%98%AF%E7%9C%9F%E6%AD%A3%E7%9A%84%E7%BC%96%E7%A8%8B%E8%83%BD%E5%8A%9B/</link><pubDate>Sun, 05 Feb 2017 00:00:00 +0000</pubDate><guid>http://CocaColf.github.io/post/%E4%BB%80%E4%B9%88%E6%98%AF%E7%9C%9F%E6%AD%A3%E7%9A%84%E7%BC%96%E7%A8%8B%E8%83%BD%E5%8A%9B/</guid><description>&lt;p>转自&lt;a href="https://www.zhihu.com/question/31034164/answer/50423838">这里&lt;/a>&lt;/p>
&lt;p>    非常好的一个问题。这可能是我在知乎见到过的问编程有关的问题中问得最好的一个了。我非常喜欢这个问题。&lt;/p>
&lt;p>    计算机科学有两类根本问题。一类是理论：算法，数据结构，复杂度，机器学习，模式识别，等等等。一类是系统：操作系统，网络系统，分布式系统，存储系统，游戏引擎，等等等等。&lt;/p>
&lt;p>    理论走的是深度，是在追问在给定的计算能力约束下如何把一个问题解决得更快更好。而系统走的是广度，是在追问对于一个现实的需求如何在众多的技术中设计出最多快好省的技术组合。&lt;/p>
&lt;p>    搞ACM的人，只练第一类。像你这样的更偏向于第二类。其实挺难得的，但很可惜的是第二类能力没有简单高效的测量考察方法，不像算法和数据结构有ACM竞赛，所以很多系统的苗子都因为缺少激励和正确引导慢慢就消隐了。&lt;/p>
&lt;p>    所以比尔盖茨才会说，看到现在学编程的人经常都把编程看作解各种脑筋急转弯的问题，他觉得很遗憾。&lt;/p>
&lt;p>    做系统，确实不提倡“重复发明轮子”。但注意，是不提倡“重复发明”，不是不提倡“重新制造”。恰恰相反的，我以为，系统的编程能力正体现在“重新制造”的能力。&lt;/p>
&lt;p>    能把已有的部件接起来，这很好。但当你恰好缺一种关键的胶水的时候，你能写出来吗？当一个已有的部件不完全符合你的需求的时候，你能改进它吗？如果你用的部件中有bug，你能把它修好吗？在网上繁多的类似功能的部件中，谁好谁坏？为什么？差别本质吗？一个开源代码库，你能把它从一个语言翻译到另一个语言吗？从一个平台移植到另一个平台吗？能准确估计自己翻译和移植的过程需要多少时间吗？能准确估计翻译和移植之后性能是会有提升还是会有所下降吗？&lt;/p>
&lt;p>    系统编程能力体现在把已有的代码拿来并变成更好的代码，体现在把没用的代码拿来并变成有用的代码，体现在把一个做好的轮子拿来能画出来轮子的设计蓝图，并用道理解释出设计蓝图中哪些地方是关键的，哪些地方是次要的，哪些地方是不容触碰的，哪些地方是还可以改进的。&lt;/p>
&lt;p>    如果你一点不懂理论，还是应该学点的。对于系统性能的设计上，算法和数据结构就像在自己手头的钱一样，它们不是万能的，但不懂是万万不行的。&lt;/p>
&lt;p>    怎么提高系统编程能力呢？土办法：多造轮子。就像学画画要画鸡蛋一样，不是这世界上没有人会画鸡蛋，但画鸡蛋能驯服手指，感受阴影线条和笔触。所以，自己多写点东西吧。写个编译器？渲染器？操作系统？web服务器？web浏览器？部件都一个个换成自己手写的，然后和已有的现成部件比一比，看看谁的性能好，谁的易用性好？好在哪儿？差在哪儿？为什么？&lt;/p>
&lt;p>    更聪明一点的办法：多拆轮子。多研究别人的代码是怎么写的。然而这个实践起来经常很难。原因：大部分工业上用的轮子可能设计上的思想和技术是好的，都设计和制造过程都很烂，里面乱成一团，让人乍一看毫无头绪，导致其对新手来说非常难拆。这种状况其实非常糟糕。所以，此办法一般只对比较简单的轮子好使，对于复杂的轮子，请量力而行。&lt;/p>
&lt;p>    轮子不好拆，其实是一个非常严重的问题。重复发明轮子固然是时间的浪费，但当轮子复杂而又不好拆的时候，尤其是原来造轮子的人已经不在场的时候，重新发明和建造轮子往往会成为无奈之下最好的选择。这是为什么工业界在明知道重复发明/制造轮子非常不好的情况下还在不断重复发明/制造轮子的根本原因。
程序本质是逻辑演绎的形式化表达，记载的是人类对这个世界的数字化理解。不能拆的轮子就像那一篇篇丢了曲谱的宋词一样，能读，却不能唱。&lt;/p>
&lt;p>    鄙人不才，正在自己研究怎么设计建造一种既好用又好拆的轮子。您没那么幸运，恐怕是等不到鄙人的技术做出来并发扬光大了。在那之前，多造轮子，多拆好拆的小轮子，应该是提高编程能力最好的办法了。&lt;/p>
&lt;p>    以上。嗯。
（文章属个人观点，与本人工作雇主无关。）&lt;/p></description></item><item><title>过期的凤梨罐头</title><link>http://CocaColf.github.io/post/%E8%BF%87%E6%9C%9F%E7%9A%84%E5%87%A4%E6%A2%A8%E7%BD%90%E5%A4%B4/</link><pubDate>Fri, 02 Sep 2016 00:00:00 +0000</pubDate><guid>http://CocaColf.github.io/post/%E8%BF%87%E6%9C%9F%E7%9A%84%E5%87%A4%E6%A2%A8%E7%BD%90%E5%A4%B4/</guid><description>&lt;p>    有年双十一我在微博上看到一个好看的女生，顺便就保存了她的照片。回去的路上我遇到和女朋友约会的兄弟，我向他挥了挥手。&lt;/p>
&lt;p>    我把QQ打开，把照片上传到了照片墙上，她的笑在我照片墙上像朵花，我觉得效果就像开了QQ会员。&lt;/p>
&lt;p>    我在房间里百无聊赖的逛着虎扑，但我发了条朋友圈，配图是那个女生，但其实照片是我偷的，我不认识这个人。&lt;/p>
&lt;p>    我的兄弟给我发来了消息，我吃惊他在这个夜晚居然有空理我。他问我怎么有女朋友了也不和他说，女朋友还那么好看。&lt;/p>
&lt;p>    我应该告诉他的，但今天是双十一，我说不是是不是有点凄惨。所以我说是，她是我女朋友。&lt;/p>
&lt;p>    他发了个滑稽的表情，我没有再回复他。我想这个表情有好多意思，我想他接下来的今晚很忙。&lt;/p>
&lt;p>    但其实照片是我偷的，我不认识这个人。我又百无聊赖的逛了下虎扑，我心里慌得很，于是我把那条朋友圈删了。我刷新了一遍消息列表，没有收到晚安的消息。我换上了自己喜欢的睡衣，倒在熬不住的夜里。&lt;/p>
&lt;p>    后来在路上遇上了另一个朋友，他就问我，你交女朋友了啊？我想应该是我兄弟告诉了别人，我交了一个女朋友，也许他还补充了一句，我女朋友还很漂亮。&lt;/p>
&lt;p>    我该如何回复呢？我只能继续说是，我不能告诉他们照片是我偷的，我不认识这么一个人。&lt;/p>
&lt;p>    因此我想我接下来要计划一下日子了，我不能再经常宅在家里了，因为很多人都知道了，我有个漂亮的女朋友。&lt;/p>
&lt;p>    我每晚在外面晃到很晚，他们遇到晚归的我，“呦，x兄送完女朋友回来了啊”。&lt;/p>
&lt;p>    以前我很少去电影院看电影，但我现在经常去看电影，我买两张票，我吃两份爆米花，因为他们都说，我有个女朋友。可我的旁边明明就空着一张座位，可是我的爆米花明明就吃不完。所以我总是浪费了一张票，我总是挺着饱胀的肚子出影院。&lt;/p>
&lt;p>    也有些时候他们在很早的时候就在街上遇到我，就很奇怪的问我你女朋友怎么没和你一起？他们低头看了看我空空的两手，满脸关心的教导我应该要给女朋友买点东西的，别舍不得那些钱，女孩子是拿来疼的。我怔怔的点点头，笑着说待会儿买，边说边指着后面的商场，她上厕所去了。&lt;/p>
&lt;p>    所以我后来上街就会买一些女生的东西，有些款式还真挺好看，我甚至想选个中性的颜色买给自己。我想，这样的话他们会以为这是我买给自己的吧，于是我总是买粉色。&lt;/p>
&lt;p>    一个晚上我在想，他们如果要聚会，大家都会带上女朋友的时候，我该怎么办？我告诉他们照片是我偷的，我不认识这么一个人？我觉得我会被嘲笑到脸比猴子屁股还要红。于是我出去旅游了，当然是带上我的女朋友一起。&lt;/p>
&lt;p>    我把美景发到了朋友圈，很多人都给我点赞，也有很多人评论我别光晒景。&lt;/p>
&lt;p>    我说我拍照技术不好，那些图拍出来把她拍丑了，不让发。&lt;/p>
&lt;p>    我想这时候女性朋友看到我的回复估计笑开了花，挽着男朋友的胳膊，摸着男朋友的手，感叹有个会拍照的男友好幸福。我想男性朋友看到是一副我不行而他好能干的神色。&lt;/p>
&lt;p>    好久好久都没人知道，我不认识这么一个人，照片是我偷的。&lt;/p>
&lt;p>    有一天我兄弟叫我去打球，打完后又请我去吃烧烤。这孙子平日很抠门，我在想他是不是今天买了国足赢球而中了大奖。&lt;/p>
&lt;p>    他莫名其妙的和我说着分手没什么大不了之类的话，还夸我这种有才华的男生能找到更好的人。&lt;/p>
&lt;p>    我才知道那天他借我手机打电话的时候看我相册了，发现我手机里把女朋友的照片全删光了。&lt;/p>
&lt;p>    我的天，原来我就分手了啊。&lt;/p>
&lt;p>    可我竟然一点也不伤心甚至想笑，如果我知道会是这样的话，我早就应该把手机给他们看。还好电影票在淘宝买的不太贵，还好出去旅游我也获得了精神自由。而此时此刻，我面前摆着的烧烤更香了，我都开始吧唧吧唧嘴来。兄弟问我怎么都不难受，我摆了摆手洒脱的说人要看得开，要学会放手。&lt;/p>
&lt;p>    我又没女友了，一切又回到最初的起点。后来我真的遇到了一个女孩子，我一直都觉得我们会好很久，但她说我这人实在是够无趣，委婉的和我说了拜拜。&lt;/p>
&lt;p>    我的心里空落落的，也在这个时候我喜欢上了听周杰伦，我喜欢那首明明就，“远方传来风笛，我却在意有你的消息”。我也开始成了诗人，我写了很多情诗，但我没有发出来，南风知我意，吹梦到西洲。那段日子好沉闷好孤独。&lt;/p>
&lt;p>    于是我想起了我和前女友的那段日子，我看电影，我吃爆米花，我逛街，我旅游，多么丰富啊！可是我才记起来，我明明就没有前女友啊。&lt;/p>
&lt;p>    照片是我偷的，我不认识这么一个人。&lt;/p>
&lt;p>    又到了一年双十一，我没有出门，但我知道我的兄弟出去约会了，对象已经不是去年那个姑娘了，而我还是一个人百无聊赖的逛虎扑。&lt;/p>
&lt;p>    我卸载了微博，鬼知道去年我干嘛把一个我不认识的女孩发到我的朋友圈。&lt;/p>
&lt;p>    今年入冬感觉比较早啊，我穿着牛仔外套感觉很冷。我看完了虎扑的帖子，我便去刷新了消息列表，没有收到晚安，但时间告诉我我该睡了。&lt;/p>
&lt;p>    我不知道为什么，我突然想发一条朋友圈。图片还是配上了去年那个女孩。&lt;/p>
&lt;p>    正准备睡觉的时候我的手机突然亮了，是一个最近走得比较近的女孩。&lt;/p>
&lt;p>    “那是你女朋友吗？”&lt;/p>
&lt;p>    “不，照片是我偷的，我不认识这么一个人。晚安。”&lt;/p>
&lt;p>    “那你干嘛把一个不认识的女生发到朋友圈啊？”&lt;/p>
&lt;p>    我没有再回复了，我也没了睡意。我穿好衣服出了门，路上几乎没了行人，我沿着一条枝叶繁茂的街行走，树叶在月下隐隐绰绰，叶下的我在风里摇曳。我开始想念一个毫不存在的人。&lt;/p>
&lt;p>    我想此时路上头是隐隐绰绰的光，路下头是相互依偎的影。路这头是她嫌我冰冷的手，路那头是我唱起不动听的歌。&lt;/p></description></item><item><title>有趣的姑娘真美</title><link>http://CocaColf.github.io/post/%E6%9C%89%E8%B6%A3%E7%9A%84%E5%A7%91%E5%A8%98%E7%9C%9F%E7%BE%8E/</link><pubDate>Fri, 20 May 2016 00:00:00 +0000</pubDate><guid>http://CocaColf.github.io/post/%E6%9C%89%E8%B6%A3%E7%9A%84%E5%A7%91%E5%A8%98%E7%9C%9F%E7%BE%8E/</guid><description>&lt;p>    从周二下午开始就没去上过课了，周二下午打球把膝盖摔伤了，第二天膝盖肿得难以行走，去了市医院检查，医生要我先回来观察，倘若两天后情况不好的话再去去做进一步检查甚至需要手术，他提到了半月板这个词，我当时着实被吓到了，这可是我只会在NBA球员身上听到的伤病啊。回来的路上，我心里是很忐忑的，更多的是害怕，怕再也打不了球了，望着车窗外转瞬即逝的风景，我很沮丧。吃了一天的云南白药，热敷了一天，第二天醒来的很早，下意识的抬了抬膝盖，发现能抬腿了，我心里的石头落地了。到现在已经可以行走了，只是会疼，安心休息，两周后伤好后再去球场干一场。&lt;/p>
&lt;p>    昨晚一个人在宿舍，把灯都关了，只留下橘色的台灯的光，我在这静默中听着歌。室友去俱乐部听千瓦演唱会了，忽然手机震动了，他给我录了现场的开场曲，是灌篮高手的主题曲，那旋律听了就想战斗。刚刚听完，却收到了小芳姑娘的消息，同样是一段语音，我很讶异。小芳姑娘是机械院的，工设专业，我和她从没见过面，是从一个群里加的好友，最初就是因为灌篮高手而聊起来的，她是个很喜欢灌篮高手的女生。和她就只有过那次的聊天，之后记忆里没有了。所以在收到语音的时候我讶异。点开语音，原来也是开场曲，我不自觉的笑了，这姑娘真是用心，还记得她列表里躺着一个和她一样喜欢着灌篮高手的男孩儿啊。她说她听到这首歌的时候克制着自己，不然就蹦起来了，我想象了一下那种感觉，我觉得像只兔子。和她聊了几句，我想还是不聊了吧，她还是好好听晚会吧，唱歌的晚会这种活动我觉得是要连贯的去投入才嗨。一个半小时后，我听到了雨拍打窗户的声音，随即声音越来越大，我起身走到窗前看了看外面，我还是给小芳姑娘发了消息：外面下着很大的雨，晚会结束回去注意点&amp;hellip;不多时她便回复我了，我这人其实话不多，但只要我想说了，话就会多起来而且往往还会有趣，而恰好小芳姑娘是个很有趣的姑娘，趣味相投。而进一步认识后，她不仅有趣，还热爱着跑步，已经是一种习惯，这让我觉得很厉害，能坚持跑步这是一件不容易的事，而且能改变一个人的气质。&lt;/p>
&lt;p>    我慢慢的觉得这姑娘很善良很有趣，我开始觉得有趣的姑娘好美，哪怕我没见过她，我想象中便会有一个很美但模糊的轮廓。我想气自华就是这种感觉吧，姑娘就是要这般明媚。对于我以后的女朋友，我也希望她是这般明媚，在她的明媚被乌云遮盖时我给她拨开乌云重见日，而她一直会是我的小太阳。&lt;/p>
&lt;p>    对了，小芳姑娘叫李芳，给这个有趣的姑娘写句诗吧：庭前桃李满，院外小径芳。&lt;/p>
&lt;blockquote>
&lt;p>2016.12.9这位姑娘成为了我女朋友。&lt;/p>
&lt;/blockquote></description></item></channel></rss>